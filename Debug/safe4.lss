
safe4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00002b0a  00002b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080019a  0080019a  00002cd8  2**0
                  ALLOC
  3 .stab         00002520  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e5c  00000000  00000000  000051f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000063a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000083b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a528  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a989  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 15 	call	0x2a40	; 0x2a40 <main>
      8a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 57       	subi	r30, 0x78	; 120
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GPIO_INIT_PORT_DIRECTION>:
#include "GPIO_LOCAL.h"
#include "GPIO_CONFIG.h"
#include "GPIO.h"

void GPIO_INIT_PORT_DIRECTION(UINT8 PORT , UINT8 DIRECTION)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	28 97       	sbiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
	
	if(DIRECTION == OUTPUT)
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <GPIO_INIT_PORT_DIRECTION+0x24>
	  DIRECTION = 0xFF;
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <GPIO_INIT_PORT_DIRECTION+0x2c>
	else if(DIRECTION == INPUT)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <GPIO_INIT_PORT_DIRECTION+0x2c>
	  DIRECTION = 0x00; 
     d00:	1a 82       	std	Y+2, r1	; 0x02
	   
	switch(PORT){
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	38 87       	std	Y+8, r19	; 0x08
     d0a:	2f 83       	std	Y+7, r18	; 0x07
     d0c:	8f 81       	ldd	r24, Y+7	; 0x07
     d0e:	98 85       	ldd	r25, Y+8	; 0x08
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	91 05       	cpc	r25, r1
     d14:	e9 f0       	breq	.+58     	; 0xd50 <GPIO_INIT_PORT_DIRECTION+0x7a>
     d16:	2f 81       	ldd	r18, Y+7	; 0x07
     d18:	38 85       	ldd	r19, Y+8	; 0x08
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	31 05       	cpc	r19, r1
     d1e:	2c f4       	brge	.+10     	; 0xd2a <GPIO_INIT_PORT_DIRECTION+0x54>
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	61 f0       	breq	.+24     	; 0xd40 <GPIO_INIT_PORT_DIRECTION+0x6a>
     d28:	2a c0       	rjmp	.+84     	; 0xd7e <GPIO_INIT_PORT_DIRECTION+0xa8>
     d2a:	2f 81       	ldd	r18, Y+7	; 0x07
     d2c:	38 85       	ldd	r19, Y+8	; 0x08
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	b1 f0       	breq	.+44     	; 0xd60 <GPIO_INIT_PORT_DIRECTION+0x8a>
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	91 05       	cpc	r25, r1
     d3c:	c9 f0       	breq	.+50     	; 0xd70 <GPIO_INIT_PORT_DIRECTION+0x9a>
     d3e:	1f c0       	rjmp	.+62     	; 0xd7e <GPIO_INIT_PORT_DIRECTION+0xa8>
	case PORT_A:
	ASSIGNPORT(DDRA , DIRECTION);
     d40:	ea e3       	ldi	r30, 0x3A	; 58
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	90 81       	ld	r25, Z
     d46:	ea e3       	ldi	r30, 0x3A	; 58
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	80 83       	st	Z, r24
     d4e:	17 c0       	rjmp	.+46     	; 0xd7e <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_B:
	ASSIGNPORT(DDRB , DIRECTION);
     d50:	e7 e3       	ldi	r30, 0x37	; 55
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	20 81       	ld	r18, Z
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	80 83       	st	Z, r24
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_C:
	ASSIGNPORT(DDRC , DIRECTION);
     d60:	e4 e3       	ldi	r30, 0x34	; 52
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	30 81       	ld	r19, Z
     d66:	e4 e3       	ldi	r30, 0x34	; 52
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	80 83       	st	Z, r24
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_D:
	ASSIGNPORT(DDRD , DIRECTION);
     d70:	e1 e3       	ldi	r30, 0x31	; 49
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	e1 e3       	ldi	r30, 0x31	; 49
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	80 83       	st	Z, r24
	break;
	default:
	
	break;
	}
}
     d7e:	28 96       	adiw	r28, 0x08	; 8
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <GPIO_WRITE_PORT_VALUE>:

void GPIO_WRITE_PORT_VALUE(UINT8 PORT , UINT8 VALUE)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	28 97       	sbiw	r28, 0x08	; 8
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	6a 83       	std	Y+2, r22	; 0x02

switch(PORT){
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	38 87       	std	Y+8, r19	; 0x08
     db0:	2f 83       	std	Y+7, r18	; 0x07
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
     db4:	98 85       	ldd	r25, Y+8	; 0x08
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	e9 f0       	breq	.+58     	; 0xdf6 <GPIO_WRITE_PORT_VALUE+0x66>
     dbc:	2f 81       	ldd	r18, Y+7	; 0x07
     dbe:	38 85       	ldd	r19, Y+8	; 0x08
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <GPIO_WRITE_PORT_VALUE+0x40>
     dc6:	8f 81       	ldd	r24, Y+7	; 0x07
     dc8:	98 85       	ldd	r25, Y+8	; 0x08
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	61 f0       	breq	.+24     	; 0xde6 <GPIO_WRITE_PORT_VALUE+0x56>
     dce:	2a c0       	rjmp	.+84     	; 0xe24 <GPIO_WRITE_PORT_VALUE+0x94>
     dd0:	2f 81       	ldd	r18, Y+7	; 0x07
     dd2:	38 85       	ldd	r19, Y+8	; 0x08
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	b1 f0       	breq	.+44     	; 0xe06 <GPIO_WRITE_PORT_VALUE+0x76>
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	c9 f0       	breq	.+50     	; 0xe16 <GPIO_WRITE_PORT_VALUE+0x86>
     de4:	1f c0       	rjmp	.+62     	; 0xe24 <GPIO_WRITE_PORT_VALUE+0x94>
	case PORT_A:
	ASSIGNPORT(PORTA , VALUE);
     de6:	eb e3       	ldi	r30, 0x3B	; 59
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	90 81       	ld	r25, Z
     dec:	eb e3       	ldi	r30, 0x3B	; 59
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	80 83       	st	Z, r24
     df4:	17 c0       	rjmp	.+46     	; 0xe24 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_B:
	ASSIGNPORT(PORTB , VALUE);
     df6:	e8 e3       	ldi	r30, 0x38	; 56
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	20 81       	ld	r18, Z
     dfc:	e8 e3       	ldi	r30, 0x38	; 56
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	80 83       	st	Z, r24
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_C:
	ASSIGNPORT(PORTC , VALUE);
     e06:	e5 e3       	ldi	r30, 0x35	; 53
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	30 81       	ld	r19, Z
     e0c:	e5 e3       	ldi	r30, 0x35	; 53
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	80 83       	st	Z, r24
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_D:
	ASSIGNPORT(PORTD , VALUE);
     e16:	e2 e3       	ldi	r30, 0x32	; 50
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	e2 e3       	ldi	r30, 0x32	; 50
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	80 83       	st	Z, r24
	default:
	
	break;
	}

}
     e24:	28 96       	adiw	r28, 0x08	; 8
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <GPIO_READ_PORT_VALUE>:

UINT8 GPIO_READ_PORT_VALUE(UINT8 PORT)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <GPIO_READ_PORT_VALUE+0x6>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <GPIO_READ_PORT_VALUE+0x8>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 VALUE;
	
	switch(PORT){
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3c 83       	std	Y+4, r19	; 0x04
     e4c:	2b 83       	std	Y+3, r18	; 0x03
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	d1 f0       	breq	.+52     	; 0xe8c <GPIO_READ_PORT_VALUE+0x56>
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <GPIO_READ_PORT_VALUE+0x36>
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	61 f0       	breq	.+24     	; 0xe82 <GPIO_READ_PORT_VALUE+0x4c>
     e6a:	1f c0       	rjmp	.+62     	; 0xeaa <GPIO_READ_PORT_VALUE+0x74>
     e6c:	2b 81       	ldd	r18, Y+3	; 0x03
     e6e:	3c 81       	ldd	r19, Y+4	; 0x04
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	81 f0       	breq	.+32     	; 0xe96 <GPIO_READ_PORT_VALUE+0x60>
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	91 05       	cpc	r25, r1
     e7e:	81 f0       	breq	.+32     	; 0xea0 <GPIO_READ_PORT_VALUE+0x6a>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <GPIO_READ_PORT_VALUE+0x74>
	case PORT_A:
	VALUE = GETPORT(PINA);
     e82:	e9 e3       	ldi	r30, 0x39	; 57
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	13 c0       	rjmp	.+38     	; 0xeb2 <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_B:
	VALUE = GETPORT(PINB);
     e8c:	e6 e3       	ldi	r30, 0x36	; 54
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_C:
	VALUE = GETPORT(PINC);
     e96:	e3 e3       	ldi	r30, 0x33	; 51
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_D:
	VALUE = GETPORT(PIND);
     ea0:	e0 e3       	ldi	r30, 0x30	; 48
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <GPIO_READ_PORT_VALUE+0x7c>
	break;
	default:
	VALUE = GETPORT(PINA);
     eaa:	e9 e3       	ldi	r30, 0x39	; 57
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	
	return VALUE;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <GPIO_INIT_PIN_DIRECTION>:

void GPIO_INIT_PIN_DIRECTION(UINT8 PORT ,UINT8 PINno, UINT8 DIRECTION)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <GPIO_INIT_PIN_DIRECTION+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <GPIO_INIT_PIN_DIRECTION+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
switch(PORT){
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	6c 81       	ldd	r22, Y+4	; 0x04
     ee2:	7d 81       	ldd	r23, Y+5	; 0x05
     ee4:	61 30       	cpi	r22, 0x01	; 1
     ee6:	71 05       	cpc	r23, r1
     ee8:	d1 f1       	breq	.+116    	; 0xf5e <GPIO_INIT_PIN_DIRECTION+0x9c>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 05       	cpc	r25, r1
     ef2:	34 f4       	brge	.+12     	; 0xf00 <GPIO_INIT_PIN_DIRECTION+0x3e>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	71 f0       	breq	.+28     	; 0xf1a <GPIO_INIT_PIN_DIRECTION+0x58>
     efe:	94 c0       	rjmp	.+296    	; 0x1028 <GPIO_INIT_PIN_DIRECTION+0x166>
     f00:	6c 81       	ldd	r22, Y+4	; 0x04
     f02:	7d 81       	ldd	r23, Y+5	; 0x05
     f04:	62 30       	cpi	r22, 0x02	; 2
     f06:	71 05       	cpc	r23, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <GPIO_INIT_PIN_DIRECTION+0x4a>
     f0a:	4b c0       	rjmp	.+150    	; 0xfa2 <GPIO_INIT_PIN_DIRECTION+0xe0>
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <GPIO_INIT_PIN_DIRECTION+0x56>
     f16:	67 c0       	rjmp	.+206    	; 0xfe6 <GPIO_INIT_PIN_DIRECTION+0x124>
     f18:	87 c0       	rjmp	.+270    	; 0x1028 <GPIO_INIT_PIN_DIRECTION+0x166>
	case PORT_A:
	ASSIGNBIT(DDRA , PINno , DIRECTION);
     f1a:	aa e3       	ldi	r26, 0x3A	; 58
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_INIT_PIN_DIRECTION+0x74>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	2a 95       	dec	r18
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_INIT_PIN_DIRECTION+0x70>
     f3a:	80 95       	com	r24
     f3c:	48 23       	and	r20, r24
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	b9 01       	movw	r22, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <GPIO_INIT_PIN_DIRECTION+0x90>
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	8a 95       	dec	r24
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <GPIO_INIT_PIN_DIRECTION+0x8c>
     f56:	cb 01       	movw	r24, r22
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	65 c0       	rjmp	.+202    	; 0x1028 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_B:
	ASSIGNBIT(DDRB , PINno , DIRECTION);
     f5e:	a7 e3       	ldi	r26, 0x37	; 55
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e7 e3       	ldi	r30, 0x37	; 55
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <GPIO_INIT_PIN_DIRECTION+0xb8>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	2a 95       	dec	r18
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <GPIO_INIT_PIN_DIRECTION+0xb4>
     f7e:	80 95       	com	r24
     f80:	48 23       	and	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b9 01       	movw	r22, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_INIT_PIN_DIRECTION+0xd4>
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_INIT_PIN_DIRECTION+0xd0>
     f9a:	cb 01       	movw	r24, r22
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	43 c0       	rjmp	.+134    	; 0x1028 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_C:
	ASSIGNBIT(DDRC , PINno , DIRECTION);
     fa2:	a4 e3       	ldi	r26, 0x34	; 52
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e4 e3       	ldi	r30, 0x34	; 52
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_INIT_PIN_DIRECTION+0xfc>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_INIT_PIN_DIRECTION+0xf8>
     fc2:	80 95       	com	r24
     fc4:	48 23       	and	r20, r24
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_INIT_PIN_DIRECTION+0x118>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_INIT_PIN_DIRECTION+0x114>
     fde:	cb 01       	movw	r24, r22
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_D:
	ASSIGNBIT(DDRD , PINno , DIRECTION);
     fe6:	a1 e3       	ldi	r26, 0x31	; 49
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e1 e3       	ldi	r30, 0x31	; 49
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_INIT_PIN_DIRECTION+0x140>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_INIT_PIN_DIRECTION+0x13c>
    1006:	80 95       	com	r24
    1008:	48 23       	and	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	b9 01       	movw	r22, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_INIT_PIN_DIRECTION+0x15c>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_INIT_PIN_DIRECTION+0x158>
    1022:	cb 01       	movw	r24, r22
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
	default:
	
	break;
	}

}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <GPIO_WRITE_PIN_VALUE>:

void GPIO_WRITE_PIN_VALUE(UINT8 PORT ,UINT8 PINno , UINT8 VALUE)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <GPIO_WRITE_PIN_VALUE+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_WRITE_PIN_VALUE+0x8>
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT){
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3d 83       	std	Y+5, r19	; 0x05
    1054:	2c 83       	std	Y+4, r18	; 0x04
    1056:	6c 81       	ldd	r22, Y+4	; 0x04
    1058:	7d 81       	ldd	r23, Y+5	; 0x05
    105a:	61 30       	cpi	r22, 0x01	; 1
    105c:	71 05       	cpc	r23, r1
    105e:	d1 f1       	breq	.+116    	; 0x10d4 <GPIO_WRITE_PIN_VALUE+0x9c>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	91 05       	cpc	r25, r1
    1068:	34 f4       	brge	.+12     	; 0x1076 <GPIO_WRITE_PIN_VALUE+0x3e>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	21 15       	cp	r18, r1
    1070:	31 05       	cpc	r19, r1
    1072:	71 f0       	breq	.+28     	; 0x1090 <GPIO_WRITE_PIN_VALUE+0x58>
    1074:	94 c0       	rjmp	.+296    	; 0x119e <GPIO_WRITE_PIN_VALUE+0x166>
    1076:	6c 81       	ldd	r22, Y+4	; 0x04
    1078:	7d 81       	ldd	r23, Y+5	; 0x05
    107a:	62 30       	cpi	r22, 0x02	; 2
    107c:	71 05       	cpc	r23, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <GPIO_WRITE_PIN_VALUE+0x4a>
    1080:	4b c0       	rjmp	.+150    	; 0x1118 <GPIO_WRITE_PIN_VALUE+0xe0>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <GPIO_WRITE_PIN_VALUE+0x56>
    108c:	67 c0       	rjmp	.+206    	; 0x115c <GPIO_WRITE_PIN_VALUE+0x124>
    108e:	87 c0       	rjmp	.+270    	; 0x119e <GPIO_WRITE_PIN_VALUE+0x166>
	case PORT_A:
	ASSIGNBIT(PORTA , PINno , VALUE);
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <GPIO_WRITE_PIN_VALUE+0x74>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	2a 95       	dec	r18
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <GPIO_WRITE_PIN_VALUE+0x70>
    10b0:	80 95       	com	r24
    10b2:	48 23       	and	r20, r24
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	b9 01       	movw	r22, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_WRITE_PIN_VALUE+0x90>
    10c4:	66 0f       	add	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_WRITE_PIN_VALUE+0x8c>
    10cc:	cb 01       	movw	r24, r22
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	65 c0       	rjmp	.+202    	; 0x119e <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_B:
	ASSIGNBIT(PORTB , PINno , VALUE);
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_WRITE_PIN_VALUE+0xb8>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	2a 95       	dec	r18
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_WRITE_PIN_VALUE+0xb4>
    10f4:	80 95       	com	r24
    10f6:	48 23       	and	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	b9 01       	movw	r22, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_WRITE_PIN_VALUE+0xd4>
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_WRITE_PIN_VALUE+0xd0>
    1110:	cb 01       	movw	r24, r22
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	43 c0       	rjmp	.+134    	; 0x119e <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_C:
	ASSIGNBIT(PORTC , PINno , VALUE);
    1118:	a5 e3       	ldi	r26, 0x35	; 53
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_WRITE_PIN_VALUE+0xfc>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	2a 95       	dec	r18
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_WRITE_PIN_VALUE+0xf8>
    1138:	80 95       	com	r24
    113a:	48 23       	and	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	b9 01       	movw	r22, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <GPIO_WRITE_PIN_VALUE+0x118>
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	8a 95       	dec	r24
    1152:	e2 f7       	brpl	.-8      	; 0x114c <GPIO_WRITE_PIN_VALUE+0x114>
    1154:	cb 01       	movw	r24, r22
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	21 c0       	rjmp	.+66     	; 0x119e <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_D:
	ASSIGNBIT(PORTD , PINno , VALUE);
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_WRITE_PIN_VALUE+0x140>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <GPIO_WRITE_PIN_VALUE+0x13c>
    117c:	80 95       	com	r24
    117e:	48 23       	and	r20, r24
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	b9 01       	movw	r22, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_WRITE_PIN_VALUE+0x15c>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_WRITE_PIN_VALUE+0x158>
    1198:	cb 01       	movw	r24, r22
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
	break;

	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <GPIO_READ_PIN_VALUE>:

UINT8 GPIO_READ_PIN_VALUE(UINT8 PORT ,UINT8 PINno)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <GPIO_READ_PIN_VALUE+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <GPIO_READ_PIN_VALUE+0x8>
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
	UINT8 PIN;
	
	switch(PORT){
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3d 83       	std	Y+5, r19	; 0x05
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	4c 81       	ldd	r20, Y+4	; 0x04
    11cc:	5d 81       	ldd	r21, Y+5	; 0x05
    11ce:	41 30       	cpi	r20, 0x01	; 1
    11d0:	51 05       	cpc	r21, r1
    11d2:	41 f1       	breq	.+80     	; 0x1224 <GPIO_READ_PIN_VALUE+0x76>
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	34 f4       	brge	.+12     	; 0x11ea <GPIO_READ_PIN_VALUE+0x3c>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	61 f0       	breq	.+24     	; 0x1200 <GPIO_READ_PIN_VALUE+0x52>
    11e8:	53 c0       	rjmp	.+166    	; 0x1290 <GPIO_READ_PIN_VALUE+0xe2>
    11ea:	4c 81       	ldd	r20, Y+4	; 0x04
    11ec:	5d 81       	ldd	r21, Y+5	; 0x05
    11ee:	42 30       	cpi	r20, 0x02	; 2
    11f0:	51 05       	cpc	r21, r1
    11f2:	51 f1       	breq	.+84     	; 0x1248 <GPIO_READ_PIN_VALUE+0x9a>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	b9 f1       	breq	.+110    	; 0x126c <GPIO_READ_PIN_VALUE+0xbe>
    11fe:	48 c0       	rjmp	.+144    	; 0x1290 <GPIO_READ_PIN_VALUE+0xe2>
	case PORT_A:
	 PIN = GETBIT(PINA , PINno);
    1200:	e9 e3       	ldi	r30, 0x39	; 57
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_READ_PIN_VALUE+0x6a>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_READ_PIN_VALUE+0x66>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	47 c0       	rjmp	.+142    	; 0x12b2 <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_B:
	 PIN = GETBIT(PINB , PINno);
    1224:	e6 e3       	ldi	r30, 0x36	; 54
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_READ_PIN_VALUE+0x8e>
    1238:	55 95       	asr	r21
    123a:	47 95       	ror	r20
    123c:	8a 95       	dec	r24
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_READ_PIN_VALUE+0x8a>
    1240:	ca 01       	movw	r24, r20
    1242:	81 70       	andi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	35 c0       	rjmp	.+106    	; 0x12b2 <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_C:
	 PIN = GETBIT(PINC , PINno);
    1248:	e3 e3       	ldi	r30, 0x33	; 51
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <GPIO_READ_PIN_VALUE+0xb2>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <GPIO_READ_PIN_VALUE+0xae>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	23 c0       	rjmp	.+70     	; 0x12b2 <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_D:
	 PIN = GETBIT(PIND , PINno);
    126c:	e0 e3       	ldi	r30, 0x30	; 48
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <GPIO_READ_PIN_VALUE+0xd6>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <GPIO_READ_PIN_VALUE+0xd2>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	11 c0       	rjmp	.+34     	; 0x12b2 <GPIO_READ_PIN_VALUE+0x104>
	break;
	default:
	 PIN = GETBIT(PINA , PINno);
    1290:	e9 e3       	ldi	r30, 0x39	; 57
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_READ_PIN_VALUE+0xfa>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_READ_PIN_VALUE+0xf6>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	
	return PIN;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <GPIO_TOGGLE_PIN>:

void GPIO_TOGGLE_PIN(UINT8 PORT ,UINT8 PINno){
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_TOGGLE_PIN+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <GPIO_TOGGLE_PIN+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	6a 83       	std	Y+2, r22	; 0x02

	switch(PORT){
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3c 83       	std	Y+4, r19	; 0x04
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	49 f1       	breq	.+82     	; 0x133a <GPIO_TOGGLE_PIN+0x76>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	2c f4       	brge	.+10     	; 0x12fc <GPIO_TOGGLE_PIN+0x38>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	61 f0       	breq	.+24     	; 0x1312 <GPIO_TOGGLE_PIN+0x4e>
    12fa:	5a c0       	rjmp	.+180    	; 0x13b0 <GPIO_TOGGLE_PIN+0xec>
    12fc:	2b 81       	ldd	r18, Y+3	; 0x03
    12fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	71 f1       	breq	.+92     	; 0x1362 <GPIO_TOGGLE_PIN+0x9e>
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	e9 f1       	breq	.+122    	; 0x138a <GPIO_TOGGLE_PIN+0xc6>
    1310:	4f c0       	rjmp	.+158    	; 0x13b0 <GPIO_TOGGLE_PIN+0xec>
	case PORT_A:
		TOGGLEBIT(PORTA ,PINno );
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_TOGGLE_PIN+0x6c>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_TOGGLE_PIN+0x68>
    1334:	84 27       	eor	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	3b c0       	rjmp	.+118    	; 0x13b0 <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_B:
		TOGGLEBIT(PORTB ,PINno );
    133a:	a8 e3       	ldi	r26, 0x38	; 56
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e8 e3       	ldi	r30, 0x38	; 56
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_TOGGLE_PIN+0x94>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_TOGGLE_PIN+0x90>
    135c:	84 27       	eor	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	27 c0       	rjmp	.+78     	; 0x13b0 <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_C:
		TOGGLEBIT(PORTC ,PINno );
    1362:	a5 e3       	ldi	r26, 0x35	; 53
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_TOGGLE_PIN+0xbc>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_TOGGLE_PIN+0xb8>
    1384:	84 27       	eor	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	13 c0       	rjmp	.+38     	; 0x13b0 <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_D:
		TOGGLEBIT(PORTD ,PINno );
    138a:	a2 e3       	ldi	r26, 0x32	; 50
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e2 e3       	ldi	r30, 0x32	; 50
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_TOGGLE_PIN+0xe4>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_TOGGLE_PIN+0xe0>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
	break;

	}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <Stepper_Init>:

static UINT8 motor_direction = MOTOR_DIRECTION;
static UINT8 delay_ms = 100;


void Stepper_Init(){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN3, OUTPUT);
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN4, OUTPUT);
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN5, OUTPUT);

#elif MOTOR_TYPE == BIPOLAR
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_A, OUTPUT);
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_B, OUTPUT);
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_C, OUTPUT);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_D, OUTPUT);
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	63 e0       	ldi	r22, 0x03	; 3
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>

	GPIO_INIT_PORT_DIRECTION(MOTOR_PORT,OUTPUT);

#endif

}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <Stepper_SetSpeed>:


void Stepper_SetSpeed(UINT8 speed){
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
	delay_ms = (1/((STEPS_PER_REVOLUTION * speed)/60))*1000 ; // time in ms
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	80 e3       	ldi	r24, 0x30	; 48
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	ac 01       	movw	r20, r24
    140c:	24 9f       	mul	r18, r20
    140e:	c0 01       	movw	r24, r0
    1410:	25 9f       	mul	r18, r21
    1412:	90 0d       	add	r25, r0
    1414:	34 9f       	mul	r19, r20
    1416:	90 0d       	add	r25, r0
    1418:	11 24       	eor	r1, r1
    141a:	2c e3       	ldi	r18, 0x3C	; 60
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	b9 01       	movw	r22, r18
    1420:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divmodhi4>
    1424:	cb 01       	movw	r24, r22
    1426:	9c 01       	movw	r18, r24
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b9 01       	movw	r22, r18
    142e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__divmodhi4>
    1432:	cb 01       	movw	r24, r22
    1434:	9c 01       	movw	r18, r24
    1436:	88 ee       	ldi	r24, 0xE8	; 232
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	ac 01       	movw	r20, r24
    143c:	24 9f       	mul	r18, r20
    143e:	c0 01       	movw	r24, r0
    1440:	25 9f       	mul	r18, r21
    1442:	90 0d       	add	r25, r0
    1444:	34 9f       	mul	r19, r20
    1446:	90 0d       	add	r25, r0
    1448:	11 24       	eor	r1, r1
    144a:	80 93 88 01 	sts	0x0188, r24

}
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <Stepper_SetDirection>:




void Stepper_SetDirection(UINT8 direction){
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <Stepper_SetDirection+0x6>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01

	switch(direction){
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3b 83       	std	Y+3, r19	; 0x03
    146c:	2a 83       	std	Y+2, r18	; 0x02
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	31 f0       	breq	.+12     	; 0x1482 <Stepper_SetDirection+0x2c>
    1476:	2a 81       	ldd	r18, Y+2	; 0x02
    1478:	3b 81       	ldd	r19, Y+3	; 0x03
    147a:	21 30       	cpi	r18, 0x01	; 1
    147c:	31 05       	cpc	r19, r1
    147e:	21 f0       	breq	.+8      	; 0x1488 <Stepper_SetDirection+0x32>
    1480:	06 c0       	rjmp	.+12     	; 0x148e <Stepper_SetDirection+0x38>
	case CLOCKWISE:
		motor_direction = CLOCKWISE;
    1482:	10 92 9a 01 	sts	0x019A, r1
    1486:	03 c0       	rjmp	.+6      	; 0x148e <Stepper_SetDirection+0x38>
		break;
	case COUNTER_CLOCKWISE:
		motor_direction = COUNTER_CLOCKWISE;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 9a 01 	sts	0x019A, r24
		break;
	}


}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <Stepper_One_Step_Clockwise>:

static void Stepper_One_Step_Clockwise(void){
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	e8 97       	sbiw	r28, 0x38	; 56
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61

	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,HIGH);
    14ae:	83 e0       	ldi	r24, 0x03	; 3
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	62 e0       	ldi	r22, 0x02	; 2
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    14d6:	80 91 88 01 	lds	r24, 0x0188
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8d ab       	std	Y+53, r24	; 0x35
    14f0:	9e ab       	std	Y+54, r25	; 0x36
    14f2:	af ab       	std	Y+55, r26	; 0x37
    14f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6d a9       	ldd	r22, Y+53	; 0x35
    14f8:	7e a9       	ldd	r23, Y+54	; 0x36
    14fa:	8f a9       	ldd	r24, Y+55	; 0x37
    14fc:	98 ad       	ldd	r25, Y+56	; 0x38
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	89 ab       	std	Y+49, r24	; 0x31
    1510:	9a ab       	std	Y+50, r25	; 0x32
    1512:	ab ab       	std	Y+51, r26	; 0x33
    1514:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1516:	69 a9       	ldd	r22, Y+49	; 0x31
    1518:	7a a9       	ldd	r23, Y+50	; 0x32
    151a:	8b a9       	ldd	r24, Y+51	; 0x33
    151c:	9c a9       	ldd	r25, Y+52	; 0x34
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <Stepper_One_Step_Clockwise+0x9e>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	98 ab       	std	Y+48, r25	; 0x30
    1534:	8f a7       	std	Y+47, r24	; 0x2f
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <Stepper_One_Step_Clockwise+0x11c>
	else if (__tmp > 65535)
    1538:	69 a9       	ldd	r22, Y+49	; 0x31
    153a:	7a a9       	ldd	r23, Y+50	; 0x32
    153c:	8b a9       	ldd	r24, Y+51	; 0x33
    153e:	9c a9       	ldd	r25, Y+52	; 0x34
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <Stepper_One_Step_Clockwise+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6d a9       	ldd	r22, Y+53	; 0x35
    1552:	7e a9       	ldd	r23, Y+54	; 0x36
    1554:	8f a9       	ldd	r24, Y+55	; 0x37
    1556:	98 ad       	ldd	r25, Y+56	; 0x38
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	98 ab       	std	Y+48, r25	; 0x30
    1576:	8f a7       	std	Y+47, r24	; 0x2f
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <Stepper_One_Step_Clockwise+0xfe>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9e a7       	std	Y+46, r25	; 0x2e
    1580:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1582:	8d a5       	ldd	r24, Y+45	; 0x2d
    1584:	9e a5       	ldd	r25, Y+46	; 0x2e
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <Stepper_One_Step_Clockwise+0xec>
    158a:	9e a7       	std	Y+46, r25	; 0x2e
    158c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1590:	98 a9       	ldd	r25, Y+48	; 0x30
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	8f a5       	ldd	r24, Y+47	; 0x2f
    159a:	98 a9       	ldd	r25, Y+48	; 0x30
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <Stepper_One_Step_Clockwise+0xe0>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <Stepper_One_Step_Clockwise+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	69 a9       	ldd	r22, Y+49	; 0x31
    15a4:	7a a9       	ldd	r23, Y+50	; 0x32
    15a6:	8b a9       	ldd	r24, Y+51	; 0x33
    15a8:	9c a9       	ldd	r25, Y+52	; 0x34
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	98 ab       	std	Y+48, r25	; 0x30
    15b4:	8f a7       	std	Y+47, r24	; 0x2f
    15b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ba:	9c a7       	std	Y+44, r25	; 0x2c
    15bc:	8b a7       	std	Y+43, r24	; 0x2b
    15be:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <Stepper_One_Step_Clockwise+0x128>
    15c6:	9c a7       	std	Y+44, r25	; 0x2c
    15c8:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,HIGH);
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	63 e0       	ldi	r22, 0x03	; 3
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    15f2:	80 91 88 01 	lds	r24, 0x0188
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8f a3       	std	Y+39, r24	; 0x27
    160c:	98 a7       	std	Y+40, r25	; 0x28
    160e:	a9 a7       	std	Y+41, r26	; 0x29
    1610:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	6f a1       	ldd	r22, Y+39	; 0x27
    1614:	78 a5       	ldd	r23, Y+40	; 0x28
    1616:	89 a5       	ldd	r24, Y+41	; 0x29
    1618:	9a a5       	ldd	r25, Y+42	; 0x2a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8b a3       	std	Y+35, r24	; 0x23
    162c:	9c a3       	std	Y+36, r25	; 0x24
    162e:	ad a3       	std	Y+37, r26	; 0x25
    1630:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <Stepper_One_Step_Clockwise+0x1ba>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <Stepper_One_Step_Clockwise+0x238>
	else if (__tmp > 65535)
    1654:	6b a1       	ldd	r22, Y+35	; 0x23
    1656:	7c a1       	ldd	r23, Y+36	; 0x24
    1658:	8d a1       	ldd	r24, Y+37	; 0x25
    165a:	9e a1       	ldd	r25, Y+38	; 0x26
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	4c f5       	brge	.+82     	; 0x16be <Stepper_One_Step_Clockwise+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	6f a1       	ldd	r22, Y+39	; 0x27
    166e:	78 a5       	ldd	r23, Y+40	; 0x28
    1670:	89 a5       	ldd	r24, Y+41	; 0x29
    1672:	9a a5       	ldd	r25, Y+42	; 0x2a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9a a3       	std	Y+34, r25	; 0x22
    1692:	89 a3       	std	Y+33, r24	; 0x21
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <Stepper_One_Step_Clockwise+0x21a>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	98 a3       	std	Y+32, r25	; 0x20
    169c:	8f 8f       	std	Y+31, r24	; 0x1f
    169e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a0:	98 a1       	ldd	r25, Y+32	; 0x20
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <Stepper_One_Step_Clockwise+0x208>
    16a6:	98 a3       	std	Y+32, r25	; 0x20
    16a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	9a a1       	ldd	r25, Y+34	; 0x22
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9a a3       	std	Y+34, r25	; 0x22
    16b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	89 a1       	ldd	r24, Y+33	; 0x21
    16b6:	9a a1       	ldd	r25, Y+34	; 0x22
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <Stepper_One_Step_Clockwise+0x1fc>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <Stepper_One_Step_Clockwise+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	6b a1       	ldd	r22, Y+35	; 0x23
    16c0:	7c a1       	ldd	r23, Y+36	; 0x24
    16c2:	8d a1       	ldd	r24, Y+37	; 0x25
    16c4:	9e a1       	ldd	r25, Y+38	; 0x26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9a a3       	std	Y+34, r25	; 0x22
    16d0:	89 a3       	std	Y+33, r24	; 0x21
    16d2:	89 a1       	ldd	r24, Y+33	; 0x21
    16d4:	9a a1       	ldd	r25, Y+34	; 0x22
    16d6:	9e 8f       	std	Y+30, r25	; 0x1e
    16d8:	8d 8f       	std	Y+29, r24	; 0x1d
    16da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <Stepper_One_Step_Clockwise+0x244>
    16e2:	9e 8f       	std	Y+30, r25	; 0x1e
    16e4:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,HIGH);
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	62 e0       	ldi	r22, 0x02	; 2
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	63 e0       	ldi	r22, 0x03	; 3
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    170e:	80 91 88 01 	lds	r24, 0x0188
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	89 8f       	std	Y+25, r24	; 0x19
    1728:	9a 8f       	std	Y+26, r25	; 0x1a
    172a:	ab 8f       	std	Y+27, r26	; 0x1b
    172c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	69 8d       	ldd	r22, Y+25	; 0x19
    1730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8d 8b       	std	Y+21, r24	; 0x15
    1748:	9e 8b       	std	Y+22, r25	; 0x16
    174a:	af 8b       	std	Y+23, r26	; 0x17
    174c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <Stepper_One_Step_Clockwise+0x2d6>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <Stepper_One_Step_Clockwise+0x354>
	else if (__tmp > 65535)
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <Stepper_One_Step_Clockwise+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	69 8d       	ldd	r22, Y+25	; 0x19
    178a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    178c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <Stepper_One_Step_Clockwise+0x336>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9a 8b       	std	Y+18, r25	; 0x12
    17b8:	89 8b       	std	Y+17, r24	; 0x11
    17ba:	89 89       	ldd	r24, Y+17	; 0x11
    17bc:	9a 89       	ldd	r25, Y+18	; 0x12
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <Stepper_One_Step_Clockwise+0x324>
    17c2:	9a 8b       	std	Y+18, r25	; 0x12
    17c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	9c 8b       	std	Y+20, r25	; 0x14
    17ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8b 89       	ldd	r24, Y+19	; 0x13
    17d2:	9c 89       	ldd	r25, Y+20	; 0x14
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <Stepper_One_Step_Clockwise+0x318>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <Stepper_One_Step_Clockwise+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	6d 89       	ldd	r22, Y+21	; 0x15
    17dc:	7e 89       	ldd	r23, Y+22	; 0x16
    17de:	8f 89       	ldd	r24, Y+23	; 0x17
    17e0:	98 8d       	ldd	r25, Y+24	; 0x18
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9c 8b       	std	Y+20, r25	; 0x14
    17ec:	8b 8b       	std	Y+19, r24	; 0x13
    17ee:	8b 89       	ldd	r24, Y+19	; 0x13
    17f0:	9c 89       	ldd	r25, Y+20	; 0x14
    17f2:	98 8b       	std	Y+16, r25	; 0x10
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f8:	98 89       	ldd	r25, Y+16	; 0x10
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <Stepper_One_Step_Clockwise+0x360>
    17fe:	98 8b       	std	Y+16, r25	; 0x10
    1800:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,HIGH);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    182a:	80 91 88 01 	lds	r24, 0x0188
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8b 87       	std	Y+11, r24	; 0x0b
    1844:	9c 87       	std	Y+12, r25	; 0x0c
    1846:	ad 87       	std	Y+13, r26	; 0x0d
    1848:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184a:	6b 85       	ldd	r22, Y+11	; 0x0b
    184c:	7c 85       	ldd	r23, Y+12	; 0x0c
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a ef       	ldi	r20, 0xFA	; 250
    1858:	54 e4       	ldi	r21, 0x44	; 68
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8f 83       	std	Y+7, r24	; 0x07
    1864:	98 87       	std	Y+8, r25	; 0x08
    1866:	a9 87       	std	Y+9, r26	; 0x09
    1868:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <Stepper_One_Step_Clockwise+0x3f2>
		__ticks = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	3f c0       	rjmp	.+126    	; 0x190a <Stepper_One_Step_Clockwise+0x470>
	else if (__tmp > 65535)
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	4c f5       	brge	.+82     	; 0x18f6 <Stepper_One_Step_Clockwise+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <Stepper_One_Step_Clockwise+0x452>
    18ce:	88 ec       	ldi	r24, 0xC8	; 200
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 83       	std	Y+4, r25	; 0x04
    18d4:	8b 83       	std	Y+3, r24	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <Stepper_One_Step_Clockwise+0x440>
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <Stepper_One_Step_Clockwise+0x434>
    18f4:	14 c0       	rjmp	.+40     	; 0x191e <Stepper_One_Step_Clockwise+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <Stepper_One_Step_Clockwise+0x47c>
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01



}
    191e:	e8 96       	adiw	r28, 0x38	; 56
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <Stepper_One_Step_CounterClockwise>:

static void Stepper_One_Step_CounterClockwise(void){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	e8 97       	sbiw	r28, 0x38	; 56
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	62 e0       	ldi	r22, 0x02	; 2
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,HIGH);
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	63 e0       	ldi	r22, 0x03	; 3
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    196c:	80 91 88 01 	lds	r24, 0x0188
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <Stepper_One_Step_CounterClockwise+0x9e>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <Stepper_One_Step_CounterClockwise+0x11c>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <Stepper_One_Step_CounterClockwise+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <Stepper_One_Step_CounterClockwise+0xfe>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <Stepper_One_Step_CounterClockwise+0xec>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <Stepper_One_Step_CounterClockwise+0xe0>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <Stepper_One_Step_CounterClockwise+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <Stepper_One_Step_CounterClockwise+0x128>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,HIGH);
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	63 e0       	ldi	r22, 0x03	; 3
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1a88:	80 91 88 01 	lds	r24, 0x0188
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8f a3       	std	Y+39, r24	; 0x27
    1aa2:	98 a7       	std	Y+40, r25	; 0x28
    1aa4:	a9 a7       	std	Y+41, r26	; 0x29
    1aa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    1aac:	89 a5       	ldd	r24, Y+41	; 0x29
    1aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8b a3       	std	Y+35, r24	; 0x23
    1ac2:	9c a3       	std	Y+36, r25	; 0x24
    1ac4:	ad a3       	std	Y+37, r26	; 0x25
    1ac6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ac8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aca:	7c a1       	ldd	r23, Y+36	; 0x24
    1acc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ace:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <Stepper_One_Step_CounterClockwise+0x1ba>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9a a3       	std	Y+34, r25	; 0x22
    1ae6:	89 a3       	std	Y+33, r24	; 0x21
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <Stepper_One_Step_CounterClockwise+0x238>
	else if (__tmp > 65535)
    1aea:	6b a1       	ldd	r22, Y+35	; 0x23
    1aec:	7c a1       	ldd	r23, Y+36	; 0x24
    1aee:	8d a1       	ldd	r24, Y+37	; 0x25
    1af0:	9e a1       	ldd	r25, Y+38	; 0x26
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <Stepper_One_Step_CounterClockwise+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6f a1       	ldd	r22, Y+39	; 0x27
    1b04:	78 a5       	ldd	r23, Y+40	; 0x28
    1b06:	89 a5       	ldd	r24, Y+41	; 0x29
    1b08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <Stepper_One_Step_CounterClockwise+0x21a>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	98 a3       	std	Y+32, r25	; 0x20
    1b32:	8f 8f       	std	Y+31, r24	; 0x1f
    1b34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b36:	98 a1       	ldd	r25, Y+32	; 0x20
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <Stepper_One_Step_CounterClockwise+0x208>
    1b3c:	98 a3       	std	Y+32, r25	; 0x20
    1b3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	89 a1       	ldd	r24, Y+33	; 0x21
    1b42:	9a a1       	ldd	r25, Y+34	; 0x22
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9a a3       	std	Y+34, r25	; 0x22
    1b48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <Stepper_One_Step_CounterClockwise+0x1fc>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <Stepper_One_Step_CounterClockwise+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6b a1       	ldd	r22, Y+35	; 0x23
    1b56:	7c a1       	ldd	r23, Y+36	; 0x24
    1b58:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9a a3       	std	Y+34, r25	; 0x22
    1b66:	89 a3       	std	Y+33, r24	; 0x21
    1b68:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <Stepper_One_Step_CounterClockwise+0x244>
    1b78:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,HIGH);
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	62 e0       	ldi	r22, 0x02	; 2
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	63 e0       	ldi	r22, 0x03	; 3
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1ba4:	80 91 88 01 	lds	r24, 0x0188
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	89 8f       	std	Y+25, r24	; 0x19
    1bbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8d 8b       	std	Y+21, r24	; 0x15
    1bde:	9e 8b       	std	Y+22, r25	; 0x16
    1be0:	af 8b       	std	Y+23, r26	; 0x17
    1be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <Stepper_One_Step_CounterClockwise+0x2d6>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <Stepper_One_Step_CounterClockwise+0x354>
	else if (__tmp > 65535)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <Stepper_One_Step_CounterClockwise+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <Stepper_One_Step_CounterClockwise+0x336>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
    1c50:	89 89       	ldd	r24, Y+17	; 0x11
    1c52:	9a 89       	ldd	r25, Y+18	; 0x12
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <Stepper_One_Step_CounterClockwise+0x324>
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <Stepper_One_Step_CounterClockwise+0x318>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <Stepper_One_Step_CounterClockwise+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	98 89       	ldd	r25, Y+16	; 0x10
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <Stepper_One_Step_CounterClockwise+0x360>
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,HIGH);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	63 e0       	ldi	r22, 0x03	; 3
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1cc0:	80 91 88 01 	lds	r24, 0x0188
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	ad 87       	std	Y+13, r26	; 0x0d
    1cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	a9 87       	std	Y+9, r26	; 0x09
    1cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <Stepper_One_Step_CounterClockwise+0x3f2>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <Stepper_One_Step_CounterClockwise+0x470>
	else if (__tmp > 65535)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <Stepper_One_Step_CounterClockwise+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <Stepper_One_Step_CounterClockwise+0x452>
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <Stepper_One_Step_CounterClockwise+0x440>
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <Stepper_One_Step_CounterClockwise+0x434>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <Stepper_One_Step_CounterClockwise+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <Stepper_One_Step_CounterClockwise+0x47c>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01


}
    1db4:	e8 96       	adiw	r28, 0x38	; 56
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <Stepper_Half_Revoloution>:

void Stepper_Half_Revoloution(){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62

}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <Stepper_Full_Revoloution>:

void Stepper_Full_Revoloution(){
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62


}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <Stepper_Steps>:


#if MOTOR_TYPE == BIPOLAR
void Stepper_Steps(UINT8 steps){
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <Stepper_Steps+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 i ;

	if(motor_direction == CLOCKWISE){
    1dee:	80 91 9a 01 	lds	r24, 0x019A
    1df2:	88 23       	and	r24, r24
    1df4:	61 f4       	brne	.+24     	; 0x1e0e <Stepper_Steps+0x2c>

		for(i = 0;i<steps;i++)
    1df6:	19 82       	std	Y+1, r1	; 0x01
    1df8:	05 c0       	rjmp	.+10     	; 0x1e04 <Stepper_Steps+0x22>
		  Stepper_One_Step_Clockwise();
    1dfa:	0e 94 4d 0a 	call	0x149a	; 0x149a <Stepper_One_Step_Clockwise>
void Stepper_Steps(UINT8 steps){
	UINT8 i ;

	if(motor_direction == CLOCKWISE){

		for(i = 0;i<steps;i++)
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	99 81       	ldd	r25, Y+1	; 0x01
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	98 17       	cp	r25, r24
    1e0a:	b8 f3       	brcs	.-18     	; 0x1dfa <Stepper_Steps+0x18>
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <Stepper_Steps+0x4a>
		  Stepper_One_Step_Clockwise();
		}
   else if(motor_direction == COUNTER_CLOCKWISE){
    1e0e:	80 91 9a 01 	lds	r24, 0x019A
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	59 f4       	brne	.+22     	; 0x1e2c <Stepper_Steps+0x4a>
		for(i = 0;i<steps;i++)
    1e16:	19 82       	std	Y+1, r1	; 0x01
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <Stepper_Steps+0x42>
		  Stepper_One_Step_CounterClockwise();
    1e1a:	0e 94 98 0c 	call	0x1930	; 0x1930 <Stepper_One_Step_CounterClockwise>

		for(i = 0;i<steps;i++)
		  Stepper_One_Step_Clockwise();
		}
   else if(motor_direction == COUNTER_CLOCKWISE){
		for(i = 0;i<steps;i++)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	98 17       	cp	r25, r24
    1e2a:	b8 f3       	brcs	.-18     	; 0x1e1a <Stepper_Steps+0x38>
		  Stepper_One_Step_CounterClockwise();
		}
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_WriteCommand>:
#include "../../MCAL/GPIO/GPIO_CONFIG.h"
#include <util/delay.h>  // so i can use _dealy_ms() function


static void LCD_WriteCommand(UINT8 Command)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(RS_PORT, RS_PIN, LOW);  // so i can write command
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(RW_PORT, RW_PIN, LOW); //  to tell the lcd that i am going to write data
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PORT_VALUE(LCD_PORT, Command); // passing the command through the lcd_port
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e64:	0e 94 c8 06 	call	0xd90	; 0xd90 <GPIO_WRITE_PORT_VALUE>
	GPIO_WRITE_PIN_VALUE(EN_PORT, EN_PIN, HIGH); // activating the enable
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	66 e0       	ldi	r22, 0x06	; 6
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e4       	ldi	r27, 0x40	; 64
    1e7a:	89 8f       	std	Y+25, r24	; 0x19
    1e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	69 8d       	ldd	r22, Y+25	; 0x19
    1e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8d 8b       	std	Y+21, r24	; 0x15
    1e9c:	9e 8b       	std	Y+22, r25	; 0x16
    1e9e:	af 8b       	std	Y+23, r26	; 0x17
    1ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <LCD_WriteCommand+0x8e>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 8b       	std	Y+20, r25	; 0x14
    1ec0:	8b 8b       	std	Y+19, r24	; 0x13
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <LCD_WriteCommand+0x10c>
	else if (__tmp > 65535)
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <LCD_WriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9c 8b       	std	Y+20, r25	; 0x14
    1f02:	8b 8b       	std	Y+19, r24	; 0x13
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <LCD_WriteCommand+0xee>
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a 8b       	std	Y+18, r25	; 0x12
    1f0c:	89 8b       	std	Y+17, r24	; 0x11
    1f0e:	89 89       	ldd	r24, Y+17	; 0x11
    1f10:	9a 89       	ldd	r25, Y+18	; 0x12
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_WriteCommand+0xdc>
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	9c 89       	ldd	r25, Y+20	; 0x14
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <LCD_WriteCommand+0xd0>
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <LCD_WriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	8b 89       	ldd	r24, Y+19	; 0x13
    1f44:	9c 89       	ldd	r25, Y+20	; 0x14
    1f46:	98 8b       	std	Y+16, r25	; 0x10
    1f48:	8f 87       	std	Y+15, r24	; 0x0f
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4c:	98 89       	ldd	r25, Y+16	; 0x10
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_WriteCommand+0x118>
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	GPIO_WRITE_PIN_VALUE(EN_PORT, EN_PIN, LOW); // disabling the enable
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	66 e0       	ldi	r22, 0x06	; 6
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e4       	ldi	r27, 0x40	; 64
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
    1f6a:	9c 87       	std	Y+12, r25	; 0x0c
    1f6c:	ad 87       	std	Y+13, r26	; 0x0d
    1f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	98 87       	std	Y+8, r25	; 0x08
    1f8c:	a9 87       	std	Y+9, r26	; 0x09
    1f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_WriteCommand+0x17c>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_WriteCommand+0x1fa>
	else if (__tmp > 65535)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_WriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_WriteCommand+0x1dc>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_WriteCommand+0x1ca>
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_WriteCommand+0x1be>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_WriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_WriteCommand+0x206>
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2044:	6d 96       	adiw	r28, 0x1d	; 29
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <LCD_Init>:

void LCD_Init(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	e8 97       	sbiw	r28, 0x38	; 56
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a8 e4       	ldi	r26, 0x48	; 72
    2070:	b2 e4       	ldi	r27, 0x42	; 66
    2072:	8d ab       	std	Y+53, r24	; 0x35
    2074:	9e ab       	std	Y+54, r25	; 0x36
    2076:	af ab       	std	Y+55, r26	; 0x37
    2078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6d a9       	ldd	r22, Y+53	; 0x35
    207c:	7e a9       	ldd	r23, Y+54	; 0x36
    207e:	8f a9       	ldd	r24, Y+55	; 0x37
    2080:	98 ad       	ldd	r25, Y+56	; 0x38
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	89 ab       	std	Y+49, r24	; 0x31
    2094:	9a ab       	std	Y+50, r25	; 0x32
    2096:	ab ab       	std	Y+51, r26	; 0x33
    2098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_Init+0x66>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_Init+0xe4>
	else if (__tmp > 65535)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6d a9       	ldd	r22, Y+53	; 0x35
    20d6:	7e a9       	ldd	r23, Y+54	; 0x36
    20d8:	8f a9       	ldd	r24, Y+55	; 0x37
    20da:	98 ad       	ldd	r25, Y+56	; 0x38
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	98 ab       	std	Y+48, r25	; 0x30
    20fa:	8f a7       	std	Y+47, r24	; 0x2f
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_Init+0xc6>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e a7       	std	Y+46, r25	; 0x2e
    2104:	8d a7       	std	Y+45, r24	; 0x2d
    2106:	8d a5       	ldd	r24, Y+45	; 0x2d
    2108:	9e a5       	ldd	r25, Y+46	; 0x2e
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_Init+0xb4>
    210e:	9e a7       	std	Y+46, r25	; 0x2e
    2110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8f a5       	ldd	r24, Y+47	; 0x2f
    2114:	98 a9       	ldd	r25, Y+48	; 0x30
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	98 ab       	std	Y+48, r25	; 0x30
    211a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8f a5       	ldd	r24, Y+47	; 0x2f
    211e:	98 a9       	ldd	r25, Y+48	; 0x30
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_Init+0xa8>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	69 a9       	ldd	r22, Y+49	; 0x31
    2128:	7a a9       	ldd	r23, Y+50	; 0x32
    212a:	8b a9       	ldd	r24, Y+51	; 0x33
    212c:	9c a9       	ldd	r25, Y+52	; 0x34
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	98 ab       	std	Y+48, r25	; 0x30
    2138:	8f a7       	std	Y+47, r24	; 0x2f
    213a:	8f a5       	ldd	r24, Y+47	; 0x2f
    213c:	98 a9       	ldd	r25, Y+48	; 0x30
    213e:	9c a7       	std	Y+44, r25	; 0x2c
    2140:	8b a7       	std	Y+43, r24	; 0x2b
    2142:	8b a5       	ldd	r24, Y+43	; 0x2b
    2144:	9c a5       	ldd	r25, Y+44	; 0x2c
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_Init+0xf0>
    214a:	9c a7       	std	Y+44, r25	; 0x2c
    214c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time

	GPIO_INIT_PORT_DIRECTION(LCD_PORT ,OUTPUT);  // IO Pins Init
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_INIT_PORT_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(RS_PORT,RS_PIN,OUTPUT);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(EN_PORT,EN_PIN,OUTPUT);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	66 e0       	ldi	r22, 0x06	; 6
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(RW_PORT,RW_PIN,OUTPUT);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	65 e0       	ldi	r22, 0x05	; 5
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>

	LCD_WriteCommand(LCD_8BIT_2_LINE_5_x_7); 
    2174:	88 e3       	ldi	r24, 0x38	; 56
    2176:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8f a3       	std	Y+39, r24	; 0x27
    2184:	98 a7       	std	Y+40, r25	; 0x28
    2186:	a9 a7       	std	Y+41, r26	; 0x29
    2188:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6f a1       	ldd	r22, Y+39	; 0x27
    218c:	78 a5       	ldd	r23, Y+40	; 0x28
    218e:	89 a5       	ldd	r24, Y+41	; 0x29
    2190:	9a a5       	ldd	r25, Y+42	; 0x2a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a ef       	ldi	r20, 0xFA	; 250
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8b a3       	std	Y+35, r24	; 0x23
    21a4:	9c a3       	std	Y+36, r25	; 0x24
    21a6:	ad a3       	std	Y+37, r26	; 0x25
    21a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21aa:	6b a1       	ldd	r22, Y+35	; 0x23
    21ac:	7c a1       	ldd	r23, Y+36	; 0x24
    21ae:	8d a1       	ldd	r24, Y+37	; 0x25
    21b0:	9e a1       	ldd	r25, Y+38	; 0x26
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_Init+0x176>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_Init+0x1f4>
	else if (__tmp > 65535)
    21cc:	6b a1       	ldd	r22, Y+35	; 0x23
    21ce:	7c a1       	ldd	r23, Y+36	; 0x24
    21d0:	8d a1       	ldd	r24, Y+37	; 0x25
    21d2:	9e a1       	ldd	r25, Y+38	; 0x26
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6f a1       	ldd	r22, Y+39	; 0x27
    21e6:	78 a5       	ldd	r23, Y+40	; 0x28
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9a a3       	std	Y+34, r25	; 0x22
    220a:	89 a3       	std	Y+33, r24	; 0x21
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_Init+0x1d6>
    220e:	88 ec       	ldi	r24, 0xC8	; 200
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 a3       	std	Y+32, r25	; 0x20
    2214:	8f 8f       	std	Y+31, r24	; 0x1f
    2216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2218:	98 a1       	ldd	r25, Y+32	; 0x20
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_Init+0x1c4>
    221e:	98 a3       	std	Y+32, r25	; 0x20
    2220:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_Init+0x1b8>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6b a1       	ldd	r22, Y+35	; 0x23
    2238:	7c a1       	ldd	r23, Y+36	; 0x24
    223a:	8d a1       	ldd	r24, Y+37	; 0x25
    223c:	9e a1       	ldd	r25, Y+38	; 0x26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	89 a1       	ldd	r24, Y+33	; 0x21
    224c:	9a a1       	ldd	r25, Y+34	; 0x22
    224e:	9e 8f       	std	Y+30, r25	; 0x1e
    2250:	8d 8f       	std	Y+29, r24	; 0x1d
    2252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2254:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_Init+0x200>
    225a:	9e 8f       	std	Y+30, r25	; 0x1e
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
	LCD_WriteCommand(LCD_DISPLAY_ON_CURSOR_OFF); 
    225e:	8c e0       	ldi	r24, 0x0C	; 12
    2260:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e8       	ldi	r26, 0x80	; 128
    226a:	bf e3       	ldi	r27, 0x3F	; 63
    226c:	89 8f       	std	Y+25, r24	; 0x19
    226e:	9a 8f       	std	Y+26, r25	; 0x1a
    2270:	ab 8f       	std	Y+27, r26	; 0x1b
    2272:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	69 8d       	ldd	r22, Y+25	; 0x19
    2276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a ef       	ldi	r20, 0xFA	; 250
    2282:	54 e4       	ldi	r21, 0x44	; 68
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8d 8b       	std	Y+21, r24	; 0x15
    228e:	9e 8b       	std	Y+22, r25	; 0x16
    2290:	af 8b       	std	Y+23, r26	; 0x17
    2292:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2294:	6d 89       	ldd	r22, Y+21	; 0x15
    2296:	7e 89       	ldd	r23, Y+22	; 0x16
    2298:	8f 89       	ldd	r24, Y+23	; 0x17
    229a:	98 8d       	ldd	r25, Y+24	; 0x18
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <LCD_Init+0x260>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <LCD_Init+0x2de>
	else if (__tmp > 65535)
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <LCD_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	69 8d       	ldd	r22, Y+25	; 0x19
    22d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <LCD_Init+0x2c0>
    22f8:	88 ec       	ldi	r24, 0xC8	; 200
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	9a 89       	ldd	r25, Y+18	; 0x12
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_Init+0x2ae>
    2308:	9a 8b       	std	Y+18, r25	; 0x12
    230a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9c 8b       	std	Y+20, r25	; 0x14
    2314:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <LCD_Init+0x2a2>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <LCD_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
    233c:	8f 85       	ldd	r24, Y+15	; 0x0f
    233e:	98 89       	ldd	r25, Y+16	; 0x10
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_Init+0x2ea>
    2344:	98 8b       	std	Y+16, r25	; 0x10
    2346:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);    //delay 1ms
	LCD_WriteCommand(LCD_CLEAR_ALSO_DDRAM); //clear LCD
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 ea       	ldi	r26, 0xA0	; 160
    2354:	b1 e4       	ldi	r27, 0x41	; 65
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <LCD_Init+0x34a>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <LCD_Init+0x3c8>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <LCD_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <LCD_Init+0x3aa>
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_Init+0x398>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <LCD_Init+0x38c>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <LCD_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_Init+0x3d4>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_WriteCommand(LCD_ENTRY_MODE);
    2432:	86 e0       	ldi	r24, 0x06	; 6
    2434:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>
	//LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_1ST_LINE);

}
    2438:	e8 96       	adiw	r28, 0x38	; 56
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_WriteData>:

void LCD_WriteData(UINT8 Data)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	6d 97       	sbiw	r28, 0x1d	; 29
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(RS_PORT,RS_PIN,HIGH );
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	64 e0       	ldi	r22, 0x04	; 4
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(RW_PORT,RW_PIN,LOW);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	65 e0       	ldi	r22, 0x05	; 5
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>

	GPIO_WRITE_PORT_VALUE(LCD_PORT , Data) ;
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2478:	0e 94 c8 06 	call	0xd90	; 0xd90 <GPIO_WRITE_PORT_VALUE>
	GPIO_WRITE_PIN_VALUE(EN_PORT,EN_PIN,HIGH);
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	66 e0       	ldi	r22, 0x06	; 6
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e0       	ldi	r26, 0x00	; 0
    248c:	b0 e4       	ldi	r27, 0x40	; 64
    248e:	89 8f       	std	Y+25, r24	; 0x19
    2490:	9a 8f       	std	Y+26, r25	; 0x1a
    2492:	ab 8f       	std	Y+27, r26	; 0x1b
    2494:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2496:	69 8d       	ldd	r22, Y+25	; 0x19
    2498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a ef       	ldi	r20, 0xFA	; 250
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8d 8b       	std	Y+21, r24	; 0x15
    24b0:	9e 8b       	std	Y+22, r25	; 0x16
    24b2:	af 8b       	std	Y+23, r26	; 0x17
    24b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	2c f4       	brge	.+10     	; 0x24d8 <LCD_WriteData+0x8e>
		__ticks = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9c 8b       	std	Y+20, r25	; 0x14
    24d4:	8b 8b       	std	Y+19, r24	; 0x13
    24d6:	3f c0       	rjmp	.+126    	; 0x2556 <LCD_WriteData+0x10c>
	else if (__tmp > 65535)
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	3f ef       	ldi	r19, 0xFF	; 255
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	57 e4       	ldi	r21, 0x47	; 71
    24e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	4c f5       	brge	.+82     	; 0x2542 <LCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f0:	69 8d       	ldd	r22, Y+25	; 0x19
    24f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	bc 01       	movw	r22, r24
    250a:	cd 01       	movw	r24, r26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <LCD_WriteData+0xee>
    251a:	88 ec       	ldi	r24, 0xC8	; 200
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	9a 8b       	std	Y+18, r25	; 0x12
    2520:	89 8b       	std	Y+17, r24	; 0x11
    2522:	89 89       	ldd	r24, Y+17	; 0x11
    2524:	9a 89       	ldd	r25, Y+18	; 0x12
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_WriteData+0xdc>
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	69 f7       	brne	.-38     	; 0x251a <LCD_WriteData+0xd0>
    2540:	14 c0       	rjmp	.+40     	; 0x256a <LCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2542:	6d 89       	ldd	r22, Y+21	; 0x15
    2544:	7e 89       	ldd	r23, Y+22	; 0x16
    2546:	8f 89       	ldd	r24, Y+23	; 0x17
    2548:	98 8d       	ldd	r25, Y+24	; 0x18
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	98 8b       	std	Y+16, r25	; 0x10
    255c:	8f 87       	std	Y+15, r24	; 0x0f
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	98 89       	ldd	r25, Y+16	; 0x10
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <LCD_WriteData+0x118>
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	GPIO_WRITE_PIN_VALUE(EN_PORT,EN_PIN,LOW);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	66 e0       	ldi	r22, 0x06	; 6
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e0       	ldi	r26, 0x00	; 0
    257a:	b0 e4       	ldi	r27, 0x40	; 64
    257c:	8b 87       	std	Y+11, r24	; 0x0b
    257e:	9c 87       	std	Y+12, r25	; 0x0c
    2580:	ad 87       	std	Y+13, r26	; 0x0d
    2582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	6b 85       	ldd	r22, Y+11	; 0x0b
    2586:	7c 85       	ldd	r23, Y+12	; 0x0c
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a ef       	ldi	r20, 0xFA	; 250
    2592:	54 e4       	ldi	r21, 0x44	; 68
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	8f 83       	std	Y+7, r24	; 0x07
    259e:	98 87       	std	Y+8, r25	; 0x08
    25a0:	a9 87       	std	Y+9, r26	; 0x09
    25a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_WriteData+0x17c>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	3f c0       	rjmp	.+126    	; 0x2644 <LCD_WriteData+0x1fa>
	else if (__tmp > 65535)
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	4c f5       	brge	.+82     	; 0x2630 <LCD_WriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25de:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <LCD_WriteData+0x1dc>
    2608:	88 ec       	ldi	r24, 0xC8	; 200
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_WriteData+0x1ca>
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f7       	brne	.-38     	; 0x2608 <LCD_WriteData+0x1be>
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <LCD_WriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_WriteData+0x206>
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2658:	6d 96       	adiw	r28, 0x1d	; 29
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <LCD_WriteSentence>:



void LCD_WriteSentence(UINT8 *PtrSentance)
	
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <LCD_WriteSentence+0x6>
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9b 83       	std	Y+3, r25	; 0x03
    2678:	8a 83       	std	Y+2, r24	; 0x02
    UINT8 i=0;
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	0e c0       	rjmp	.+28     	; 0x269a <LCD_WriteSentence+0x30>
	
	while( PtrSentance[i] != '\0' )
	{
	  LCD_WriteData( PtrSentance[i] ) ;
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	fc 01       	movw	r30, r24
    268a:	e2 0f       	add	r30, r18
    268c:	f3 1f       	adc	r31, r19
    268e:	80 81       	ld	r24, Z
    2690:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_WriteData>
          i++ ;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
void LCD_WriteSentence(UINT8 *PtrSentance)
	
{
    UINT8 i=0;
	
	while( PtrSentance[i] != '\0' )
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	39 f7       	brne	.-50     	; 0x267e <LCD_WriteSentence+0x14>
	{
	  LCD_WriteData( PtrSentance[i] ) ;
          i++ ;
        }	

}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_Clear>:

void LCD_Clear(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62

       LCD_WriteCommand(LCD_CLEAR_ALSO_DDRAM) ;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>

}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <LCD_1st_Line>:

void LCD_1st_Line(void){
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_1ST_LINE) ;
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>

}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_2nd_Line>:
void LCD_2nd_Line(void){
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_2ND_LINE) ;
    26ec:	80 ec       	ldi	r24, 0xC0	; 192
    26ee:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_WriteCommand>

}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <Keypad_Init>:
#include<util/delay.h>

static const UINT8 keypad_array[COL][ROW] =  { KEYPAD_ARRAY };   //more readable


void Keypad_Init(void){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
  
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R1_PIN, OUTPUT);
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R2_PIN, OUTPUT);
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R3_PIN, OUTPUT);
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R4_PIN, OUTPUT);
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	63 e0       	ldi	r22, 0x03	; 3
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>

	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R1_PIN, HIGH);
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R2_PIN, HIGH);
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R3_PIN, HIGH);
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	62 e0       	ldi	r22, 0x02	; 2
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R4_PIN, HIGH);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	63 e0       	ldi	r22, 0x03	; 3
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>

	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C1_PIN, INPUT);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	64 e0       	ldi	r22, 0x04	; 4
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C2_PIN, INPUT);
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	65 e0       	ldi	r22, 0x05	; 5
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C3_PIN, INPUT);
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	66 e0       	ldi	r22, 0x06	; 6
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C4_PIN, INPUT);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	67 e0       	ldi	r22, 0x07	; 7
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_INIT_PIN_DIRECTION>
	
	//Using Internal Pull Up 
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C1_PIN, HIGH);
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	64 e0       	ldi	r22, 0x04	; 4
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C2_PIN, HIGH);
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	65 e0       	ldi	r22, 0x05	; 5
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C3_PIN, HIGH);
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	66 e0       	ldi	r22, 0x06	; 6
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C4_PIN, HIGH);
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>

}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <Keypad_GetKey>:




UINT8 Keypad_GetKey(void)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	61 97       	sbiw	r28, 0x11	; 17
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
  UINT8 ROWCOUNT;
	UINT8 COLCOUNT;
	UINT8 RESULT;
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
    27ba:	19 8a       	std	Y+17, r1	; 0x11
    27bc:	ab c0       	rjmp	.+342    	; 0x2914 <Keypad_GetKey+0x16e>
	{
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , LOW);
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	69 89       	ldd	r22, Y+17	; 0x11
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
		for (COLCOUNT=COL_INT ;COLCOUNT<=COL_END ;COLCOUNT++)
    27c8:	84 e0       	ldi	r24, 0x04	; 4
    27ca:	88 8b       	std	Y+16, r24	; 0x10
    27cc:	97 c0       	rjmp	.+302    	; 0x28fc <Keypad_GetKey+0x156>
		{
			if(GPIO_READ_PIN_VALUE(KEYPAD_PORT,COLCOUNT)==LOW)
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	68 89       	ldd	r22, Y+16	; 0x10
    27d2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <GPIO_READ_PIN_VALUE>
    27d6:	88 23       	and	r24, r24
    27d8:	09 f0       	breq	.+2      	; 0x27dc <Keypad_GetKey+0x36>
    27da:	8d c0       	rjmp	.+282    	; 0x28f6 <Keypad_GetKey+0x150>
			{
				RESULT=keypad_array[ROWCOUNT][COLCOUNT-COL_INT];
    27dc:	89 89       	ldd	r24, Y+17	; 0x11
    27de:	48 2f       	mov	r20, r24
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	88 89       	ldd	r24, Y+16	; 0x10
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 01       	movw	r18, r24
    27ea:	24 50       	subi	r18, 0x04	; 4
    27ec:	30 40       	sbci	r19, 0x00	; 0
    27ee:	ca 01       	movw	r24, r20
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	fc 01       	movw	r30, r24
    27fe:	e7 57       	subi	r30, 0x77	; 119
    2800:	fe 4f       	sbci	r31, 0xFE	; 254
    2802:	80 81       	ld	r24, Z
    2804:	8f 87       	std	Y+15, r24	; 0x0f
				 /* because we don't use timer we use this condition for one press */
				while(GPIO_READ_PIN_VALUE(KEYPAD_PORT,COLCOUNT)==LOW);
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	68 89       	ldd	r22, Y+16	; 0x10
    280a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <GPIO_READ_PIN_VALUE>
    280e:	88 23       	and	r24, r24
    2810:	d1 f3       	breq	.-12     	; 0x2806 <Keypad_GetKey+0x60>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e2       	ldi	r26, 0x20	; 32
    2818:	b1 e4       	ldi	r27, 0x41	; 65
    281a:	8b 87       	std	Y+11, r24	; 0x0b
    281c:	9c 87       	std	Y+12, r25	; 0x0c
    281e:	ad 87       	std	Y+13, r26	; 0x0d
    2820:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	6b 85       	ldd	r22, Y+11	; 0x0b
    2824:	7c 85       	ldd	r23, Y+12	; 0x0c
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	9e 85       	ldd	r25, Y+14	; 0x0e
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a ef       	ldi	r20, 0xFA	; 250
    2830:	54 e4       	ldi	r21, 0x44	; 68
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8f 83       	std	Y+7, r24	; 0x07
    283c:	98 87       	std	Y+8, r25	; 0x08
    283e:	a9 87       	std	Y+9, r26	; 0x09
    2840:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2842:	6f 81       	ldd	r22, Y+7	; 0x07
    2844:	78 85       	ldd	r23, Y+8	; 0x08
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <Keypad_GetKey+0xbe>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <Keypad_GetKey+0x13c>
	else if (__tmp > 65535)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <Keypad_GetKey+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	6b 85       	ldd	r22, Y+11	; 0x0b
    287e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <Keypad_GetKey+0x11e>
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9c 83       	std	Y+4, r25	; 0x04
    28ac:	8b 83       	std	Y+3, r24	; 0x03
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <Keypad_GetKey+0x10c>
    28b6:	9c 83       	std	Y+4, r25	; 0x04
    28b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <Keypad_GetKey+0x100>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <Keypad_GetKey+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <Keypad_GetKey+0x148>
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
	UINT8 COLCOUNT;
	UINT8 RESULT;
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
	{
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , LOW);
		for (COLCOUNT=COL_INT ;COLCOUNT<=COL_END ;COLCOUNT++)
    28f6:	88 89       	ldd	r24, Y+16	; 0x10
    28f8:	8f 5f       	subi	r24, 0xFF	; 255
    28fa:	88 8b       	std	Y+16, r24	; 0x10
    28fc:	88 89       	ldd	r24, Y+16	; 0x10
    28fe:	88 30       	cpi	r24, 0x08	; 8
    2900:	08 f4       	brcc	.+2      	; 0x2904 <Keypad_GetKey+0x15e>
    2902:	65 cf       	rjmp	.-310    	; 0x27ce <Keypad_GetKey+0x28>
				_delay_ms(10);  //to avoid bouncing
			}
			
		}
    
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , HIGH);  //deactivate again
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	69 89       	ldd	r22, Y+17	; 0x11
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_WRITE_PIN_VALUE>
UINT8 Keypad_GetKey(void)
{
  UINT8 ROWCOUNT;
	UINT8 COLCOUNT;
	UINT8 RESULT;
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
    290e:	89 89       	ldd	r24, Y+17	; 0x11
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	89 8b       	std	Y+17, r24	; 0x11
    2914:	89 89       	ldd	r24, Y+17	; 0x11
    2916:	84 30       	cpi	r24, 0x04	; 4
    2918:	08 f4       	brcc	.+2      	; 0x291c <Keypad_GetKey+0x176>
    291a:	51 cf       	rjmp	.-350    	; 0x27be <Keypad_GetKey+0x18>
		}
    
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , HIGH);  //deactivate again
	}

   return RESULT;
    291c:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    291e:	61 96       	adiw	r28, 0x11	; 17
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <print_enter_new_password>:
/* 	 Function    : print_enter_new_password
**   Parameters  : None
**   Return      : None
**   Description : It will clear LCD and print Enter New Pass
*/
void print_enter_new_password(void){
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear();
    2938:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_Clear>
	LCD_WriteSentence(" Enter New Pass ");
    293c:	80 e6       	ldi	r24, 0x60	; 96
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_WriteSentence>
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <get_password>:
/* 	 Function    : get_password
**   Parameters  : None
**   Return      : password
**   Description : It will get key from user , print '*' on LCD
*/
UINT8 get_password(void){
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <get_password+0x6>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62

	UINT8 password;
	UINT8 i;
	LCD_2nd_Line();
    2954:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_2nd_Line>

/******* converting from ASCII to integer (Decimal) *******/
	password = Keypad_GetKey() - '0'; //'0' = 48 in ASCII
    2958:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Keypad_GetKey>
    295c:	80 53       	subi	r24, 0x30	; 48
    295e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_WriteData('*');
    2960:	8a e2       	ldi	r24, 0x2A	; 42
    2962:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_WriteData>

/******* Getting password one digit at a time *******/
	for(i = 0;i<3;i++){
    2966:	19 82       	std	Y+1, r1	; 0x01
    2968:	1b c0       	rjmp	.+54     	; 0x29a0 <get_password+0x56>
	  password *= 10 ;
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9c 01       	movw	r18, r24
    2972:	22 0f       	add	r18, r18
    2974:	33 1f       	adc	r19, r19
    2976:	c9 01       	movw	r24, r18
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	82 0f       	add	r24, r18
    2982:	93 1f       	adc	r25, r19
    2984:	8a 83       	std	Y+2, r24	; 0x02
	  password += Keypad_GetKey() - '0'; //'0' = 48 in ASCII
    2986:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <Keypad_GetKey>
    298a:	98 2f       	mov	r25, r24
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	89 0f       	add	r24, r25
    2990:	80 53       	subi	r24, 0x30	; 48
    2992:	8a 83       	std	Y+2, r24	; 0x02
	  LCD_WriteData('*');
    2994:	8a e2       	ldi	r24, 0x2A	; 42
    2996:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_WriteData>
/******* converting from ASCII to integer (Decimal) *******/
	password = Keypad_GetKey() - '0'; //'0' = 48 in ASCII
	LCD_WriteData('*');

/******* Getting password one digit at a time *******/
	for(i = 0;i<3;i++){
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	10 f3       	brcs	.-60     	; 0x296a <get_password+0x20>
	  password *= 10 ;
	  password += Keypad_GetKey() - '0'; //'0' = 48 in ASCII
	  LCD_WriteData('*');
	}

	return password;
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <print_enter_confirm_password>:
**   Parameters  : None
**   Return      : None
**   Description : It will clear LCD and print Enter Confirmation Pass
*/
void print_enter_confirm_password(void)
{
    29b2:	df 93       	push	r29
    29b4:	cf 93       	push	r28
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    29ba:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_Clear>
	LCD_WriteSentence(" Confirm Pass ");
    29be:	81 e7       	ldi	r24, 0x71	; 113
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_WriteSentence>
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <state_machine>:
/* 	 Function    : state_machine
**   Parameters  : None
**   Return      : None
**   Description : It will make the state machine
*/
void state_machine(void){
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <state_machine+0x6>
    29d2:	0f 92       	push	r0
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
	UINT8 pass ;
	switch(state){
    29d8:	80 91 9b 01 	lds	r24, 0x019B
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	3b 83       	std	Y+3, r19	; 0x03
    29e2:	2a 83       	std	Y+2, r18	; 0x02
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	9b 81       	ldd	r25, Y+3	; 0x03
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	91 05       	cpc	r25, r1
    29ec:	19 f1       	breq	.+70     	; 0x2a34 <state_machine+0x68>
    29ee:	2a 81       	ldd	r18, Y+2	; 0x02
    29f0:	3b 81       	ldd	r19, Y+3	; 0x03
    29f2:	22 30       	cpi	r18, 0x02	; 2
    29f4:	31 05       	cpc	r19, r1
    29f6:	71 f0       	breq	.+28     	; 0x2a14 <state_machine+0x48>
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	9b 81       	ldd	r25, Y+3	; 0x03
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	d1 f4       	brne	.+52     	; 0x2a34 <state_machine+0x68>
		case NEW_PASSWORD:

			print_enter_new_password();
    2a00:	0e 94 98 14 	call	0x2930	; 0x2930 <print_enter_new_password>
			password = get_password();
    2a04:	0e 94 a5 14 	call	0x294a	; 0x294a <get_password>
    2a08:	80 93 9c 01 	sts	0x019C, r24
			state = CONFIRM_PASSWORD;
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	80 93 9b 01 	sts	0x019B, r24
    2a12:	10 c0       	rjmp	.+32     	; 0x2a34 <state_machine+0x68>
		case MASTER_MODE:

		break;
		case CONFIRM_PASSWORD:

			print_enter_confirm_password();   //Display Confirmation Text
    2a14:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <print_enter_confirm_password>
			pass = get_password();            //Function To Get Confirm Password
    2a18:	0e 94 a5 14 	call	0x294a	; 0x294a <get_password>
    2a1c:	89 83       	std	Y+1, r24	; 0x01
			if(pass != password)              //Comparing With Default Password
    2a1e:	90 91 9c 01 	lds	r25, 0x019C
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	89 17       	cp	r24, r25
    2a26:	19 f0       	breq	.+6      	; 0x2a2e <state_machine+0x62>
			{
				state = NEW_PASSWORD;
    2a28:	10 92 9b 01 	sts	0x019B, r1
    2a2c:	03 c0       	rjmp	.+6      	; 0x2a34 <state_machine+0x68>
			}
			else
				state = OPEN_SAFE;
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	80 93 9b 01 	sts	0x019B, r24


	}


}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <main>:
void main(void){
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	ff cf       	rjmp	.-2      	; 0x2a48 <main+0x8>

00002a4a <__divmodhi4>:
    2a4a:	97 fb       	bst	r25, 7
    2a4c:	09 2e       	mov	r0, r25
    2a4e:	07 26       	eor	r0, r23
    2a50:	0a d0       	rcall	.+20     	; 0x2a66 <__divmodhi4_neg1>
    2a52:	77 fd       	sbrc	r23, 7
    2a54:	04 d0       	rcall	.+8      	; 0x2a5e <__divmodhi4_neg2>
    2a56:	0c d0       	rcall	.+24     	; 0x2a70 <__udivmodhi4>
    2a58:	06 d0       	rcall	.+12     	; 0x2a66 <__divmodhi4_neg1>
    2a5a:	00 20       	and	r0, r0
    2a5c:	1a f4       	brpl	.+6      	; 0x2a64 <__divmodhi4_exit>

00002a5e <__divmodhi4_neg2>:
    2a5e:	70 95       	com	r23
    2a60:	61 95       	neg	r22
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255

00002a64 <__divmodhi4_exit>:
    2a64:	08 95       	ret

00002a66 <__divmodhi4_neg1>:
    2a66:	f6 f7       	brtc	.-4      	; 0x2a64 <__divmodhi4_exit>
    2a68:	90 95       	com	r25
    2a6a:	81 95       	neg	r24
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	08 95       	ret

00002a70 <__udivmodhi4>:
    2a70:	aa 1b       	sub	r26, r26
    2a72:	bb 1b       	sub	r27, r27
    2a74:	51 e1       	ldi	r21, 0x11	; 17
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <__udivmodhi4_ep>

00002a78 <__udivmodhi4_loop>:
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	a6 17       	cp	r26, r22
    2a7e:	b7 07       	cpc	r27, r23
    2a80:	10 f0       	brcs	.+4      	; 0x2a86 <__udivmodhi4_ep>
    2a82:	a6 1b       	sub	r26, r22
    2a84:	b7 0b       	sbc	r27, r23

00002a86 <__udivmodhi4_ep>:
    2a86:	88 1f       	adc	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	5a 95       	dec	r21
    2a8c:	a9 f7       	brne	.-22     	; 0x2a78 <__udivmodhi4_loop>
    2a8e:	80 95       	com	r24
    2a90:	90 95       	com	r25
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	08 95       	ret

00002a98 <__prologue_saves__>:
    2a98:	2f 92       	push	r2
    2a9a:	3f 92       	push	r3
    2a9c:	4f 92       	push	r4
    2a9e:	5f 92       	push	r5
    2aa0:	6f 92       	push	r6
    2aa2:	7f 92       	push	r7
    2aa4:	8f 92       	push	r8
    2aa6:	9f 92       	push	r9
    2aa8:	af 92       	push	r10
    2aaa:	bf 92       	push	r11
    2aac:	cf 92       	push	r12
    2aae:	df 92       	push	r13
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	ca 1b       	sub	r28, r26
    2ac2:	db 0b       	sbc	r29, r27
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	09 94       	ijmp

00002ad0 <__epilogue_restores__>:
    2ad0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad2:	39 88       	ldd	r3, Y+17	; 0x11
    2ad4:	48 88       	ldd	r4, Y+16	; 0x10
    2ad6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ad8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ada:	7d 84       	ldd	r7, Y+13	; 0x0d
    2adc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ade:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ae6:	df 80       	ldd	r13, Y+7	; 0x07
    2ae8:	ee 80       	ldd	r14, Y+6	; 0x06
    2aea:	fd 80       	ldd	r15, Y+5	; 0x05
    2aec:	0c 81       	ldd	r16, Y+4	; 0x04
    2aee:	1b 81       	ldd	r17, Y+3	; 0x03
    2af0:	aa 81       	ldd	r26, Y+2	; 0x02
    2af2:	b9 81       	ldd	r27, Y+1	; 0x01
    2af4:	ce 0f       	add	r28, r30
    2af6:	d1 1d       	adc	r29, r1
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	ed 01       	movw	r28, r26
    2b04:	08 95       	ret

00002b06 <_exit>:
    2b06:	f8 94       	cli

00002b08 <__stop_program>:
    2b08:	ff cf       	rjmp	.-2      	; 0x2b08 <__stop_program>
