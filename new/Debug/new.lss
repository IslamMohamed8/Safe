
new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00800060  00003c60  00003cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800230  00800230  00003ec4  2**0
                  ALLOC
  3 .stab         00003690  00000000  00000000  00003ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001124  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  00008a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000ac23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000bedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <main>
      8a:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e1       	ldi	r26, 0x16	; 22
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e1       	ldi	r24, 0x16	; 22
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e2 5e       	subi	r30, 0xE2	; 226
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <GPIO_INIT_PORT_DIRECTION>:
#include "GPIO_LOCAL.h"
#include "GPIO_CONFIG.h"
#include "GPIO.h"

void GPIO_INIT_PORT_DIRECTION(UINT8 PORT , UINT8 DIRECTION)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	28 97       	sbiw	r28, 0x08	; 8
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	6a 83       	std	Y+2, r22	; 0x02
	
	if(DIRECTION == OUTPUT)
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	19 f4       	brne	.+6      	; 0xdb6 <GPIO_INIT_PORT_DIRECTION+0x24>
	  DIRECTION = 0xFF;
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	8a 83       	std	Y+2, r24	; 0x02
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <GPIO_INIT_PORT_DIRECTION+0x2c>
	else if(DIRECTION == INPUT)
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <GPIO_INIT_PORT_DIRECTION+0x2c>
	  DIRECTION = 0x00; 
     dbc:	1a 82       	std	Y+2, r1	; 0x02
	   
	switch(PORT){
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	38 87       	std	Y+8, r19	; 0x08
     dc6:	2f 83       	std	Y+7, r18	; 0x07
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	e9 f0       	breq	.+58     	; 0xe0c <GPIO_INIT_PORT_DIRECTION+0x7a>
     dd2:	2f 81       	ldd	r18, Y+7	; 0x07
     dd4:	38 85       	ldd	r19, Y+8	; 0x08
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <GPIO_INIT_PORT_DIRECTION+0x54>
     ddc:	8f 81       	ldd	r24, Y+7	; 0x07
     dde:	98 85       	ldd	r25, Y+8	; 0x08
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	61 f0       	breq	.+24     	; 0xdfc <GPIO_INIT_PORT_DIRECTION+0x6a>
     de4:	2a c0       	rjmp	.+84     	; 0xe3a <GPIO_INIT_PORT_DIRECTION+0xa8>
     de6:	2f 81       	ldd	r18, Y+7	; 0x07
     de8:	38 85       	ldd	r19, Y+8	; 0x08
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	b1 f0       	breq	.+44     	; 0xe1c <GPIO_INIT_PORT_DIRECTION+0x8a>
     df0:	8f 81       	ldd	r24, Y+7	; 0x07
     df2:	98 85       	ldd	r25, Y+8	; 0x08
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	c9 f0       	breq	.+50     	; 0xe2c <GPIO_INIT_PORT_DIRECTION+0x9a>
     dfa:	1f c0       	rjmp	.+62     	; 0xe3a <GPIO_INIT_PORT_DIRECTION+0xa8>
	case PORT_A:
	ASSIGNPORT(DDRA , DIRECTION);
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	90 81       	ld	r25, Z
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	80 83       	st	Z, r24
     e0a:	17 c0       	rjmp	.+46     	; 0xe3a <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_B:
	ASSIGNPORT(DDRB , DIRECTION);
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	20 81       	ld	r18, Z
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	80 83       	st	Z, r24
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_C:
	ASSIGNPORT(DDRC , DIRECTION);
     e1c:	e4 e3       	ldi	r30, 0x34	; 52
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	30 81       	ld	r19, Z
     e22:	e4 e3       	ldi	r30, 0x34	; 52
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	80 83       	st	Z, r24
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <GPIO_INIT_PORT_DIRECTION+0xa8>
	break;
	case PORT_D:
	ASSIGNPORT(DDRD , DIRECTION);
     e2c:	e1 e3       	ldi	r30, 0x31	; 49
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	80 83       	st	Z, r24
	break;
	default:
	
	break;
	}
}
     e3a:	28 96       	adiw	r28, 0x08	; 8
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <GPIO_WRITE_PORT_VALUE>:

void GPIO_WRITE_PORT_VALUE(UINT8 PORT , UINT8 VALUE)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	28 97       	sbiw	r28, 0x08	; 8
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	6a 83       	std	Y+2, r22	; 0x02

switch(PORT){
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	38 87       	std	Y+8, r19	; 0x08
     e6c:	2f 83       	std	Y+7, r18	; 0x07
     e6e:	8f 81       	ldd	r24, Y+7	; 0x07
     e70:	98 85       	ldd	r25, Y+8	; 0x08
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	91 05       	cpc	r25, r1
     e76:	e9 f0       	breq	.+58     	; 0xeb2 <GPIO_WRITE_PORT_VALUE+0x66>
     e78:	2f 81       	ldd	r18, Y+7	; 0x07
     e7a:	38 85       	ldd	r19, Y+8	; 0x08
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	2c f4       	brge	.+10     	; 0xe8c <GPIO_WRITE_PORT_VALUE+0x40>
     e82:	8f 81       	ldd	r24, Y+7	; 0x07
     e84:	98 85       	ldd	r25, Y+8	; 0x08
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	61 f0       	breq	.+24     	; 0xea2 <GPIO_WRITE_PORT_VALUE+0x56>
     e8a:	2a c0       	rjmp	.+84     	; 0xee0 <GPIO_WRITE_PORT_VALUE+0x94>
     e8c:	2f 81       	ldd	r18, Y+7	; 0x07
     e8e:	38 85       	ldd	r19, Y+8	; 0x08
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	b1 f0       	breq	.+44     	; 0xec2 <GPIO_WRITE_PORT_VALUE+0x76>
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	98 85       	ldd	r25, Y+8	; 0x08
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	c9 f0       	breq	.+50     	; 0xed2 <GPIO_WRITE_PORT_VALUE+0x86>
     ea0:	1f c0       	rjmp	.+62     	; 0xee0 <GPIO_WRITE_PORT_VALUE+0x94>
	case PORT_A:
	ASSIGNPORT(PORTA , VALUE);
     ea2:	eb e3       	ldi	r30, 0x3B	; 59
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	90 81       	ld	r25, Z
     ea8:	eb e3       	ldi	r30, 0x3B	; 59
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	80 83       	st	Z, r24
     eb0:	17 c0       	rjmp	.+46     	; 0xee0 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_B:
	ASSIGNPORT(PORTB , VALUE);
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	20 81       	ld	r18, Z
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	80 83       	st	Z, r24
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_C:
	ASSIGNPORT(PORTC , VALUE);
     ec2:	e5 e3       	ldi	r30, 0x35	; 53
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	30 81       	ld	r19, Z
     ec8:	e5 e3       	ldi	r30, 0x35	; 53
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	80 83       	st	Z, r24
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <GPIO_WRITE_PORT_VALUE+0x94>
	break;
	case PORT_D:
	ASSIGNPORT(PORTD , VALUE);
     ed2:	e2 e3       	ldi	r30, 0x32	; 50
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	e2 e3       	ldi	r30, 0x32	; 50
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	80 83       	st	Z, r24
	default:
	
	break;
	}

}
     ee0:	28 96       	adiw	r28, 0x08	; 8
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_READ_PORT_VALUE>:

UINT8 GPIO_READ_PORT_VALUE(UINT8 PORT)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_READ_PORT_VALUE+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_READ_PORT_VALUE+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 VALUE;
	
	switch(PORT){
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3c 83       	std	Y+4, r19	; 0x04
     f08:	2b 83       	std	Y+3, r18	; 0x03
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	d1 f0       	breq	.+52     	; 0xf48 <GPIO_READ_PORT_VALUE+0x56>
     f14:	2b 81       	ldd	r18, Y+3	; 0x03
     f16:	3c 81       	ldd	r19, Y+4	; 0x04
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <GPIO_READ_PORT_VALUE+0x36>
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	61 f0       	breq	.+24     	; 0xf3e <GPIO_READ_PORT_VALUE+0x4c>
     f26:	1f c0       	rjmp	.+62     	; 0xf66 <GPIO_READ_PORT_VALUE+0x74>
     f28:	2b 81       	ldd	r18, Y+3	; 0x03
     f2a:	3c 81       	ldd	r19, Y+4	; 0x04
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	81 f0       	breq	.+32     	; 0xf52 <GPIO_READ_PORT_VALUE+0x60>
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	81 f0       	breq	.+32     	; 0xf5c <GPIO_READ_PORT_VALUE+0x6a>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <GPIO_READ_PORT_VALUE+0x74>
	case PORT_A:
	VALUE = GETPORT(PINA);
     f3e:	e9 e3       	ldi	r30, 0x39	; 57
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	13 c0       	rjmp	.+38     	; 0xf6e <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_B:
	VALUE = GETPORT(PINB);
     f48:	e6 e3       	ldi	r30, 0x36	; 54
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	0e c0       	rjmp	.+28     	; 0xf6e <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_C:
	VALUE = GETPORT(PINC);
     f52:	e3 e3       	ldi	r30, 0x33	; 51
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <GPIO_READ_PORT_VALUE+0x7c>
	break;
	case PORT_D:
	VALUE = GETPORT(PIND);
     f5c:	e0 e3       	ldi	r30, 0x30	; 48
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <GPIO_READ_PORT_VALUE+0x7c>
	break;
	default:
	VALUE = GETPORT(PINA);
     f66:	e9 e3       	ldi	r30, 0x39	; 57
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	
	return VALUE;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <GPIO_INIT_PIN_DIRECTION>:

void GPIO_INIT_PIN_DIRECTION(UINT8 PORT ,UINT8 PINno, UINT8 DIRECTION)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <GPIO_INIT_PIN_DIRECTION+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <GPIO_INIT_PIN_DIRECTION+0x8>
     f86:	0f 92       	push	r0
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	6a 83       	std	Y+2, r22	; 0x02
     f90:	4b 83       	std	Y+3, r20	; 0x03
switch(PORT){
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	3d 83       	std	Y+5, r19	; 0x05
     f9a:	2c 83       	std	Y+4, r18	; 0x04
     f9c:	6c 81       	ldd	r22, Y+4	; 0x04
     f9e:	7d 81       	ldd	r23, Y+5	; 0x05
     fa0:	61 30       	cpi	r22, 0x01	; 1
     fa2:	71 05       	cpc	r23, r1
     fa4:	d1 f1       	breq	.+116    	; 0x101a <GPIO_INIT_PIN_DIRECTION+0x9c>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	34 f4       	brge	.+12     	; 0xfbc <GPIO_INIT_PIN_DIRECTION+0x3e>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <GPIO_INIT_PIN_DIRECTION+0x58>
     fba:	94 c0       	rjmp	.+296    	; 0x10e4 <GPIO_INIT_PIN_DIRECTION+0x166>
     fbc:	6c 81       	ldd	r22, Y+4	; 0x04
     fbe:	7d 81       	ldd	r23, Y+5	; 0x05
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	71 05       	cpc	r23, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <GPIO_INIT_PIN_DIRECTION+0x4a>
     fc6:	4b c0       	rjmp	.+150    	; 0x105e <GPIO_INIT_PIN_DIRECTION+0xe0>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <GPIO_INIT_PIN_DIRECTION+0x56>
     fd2:	67 c0       	rjmp	.+206    	; 0x10a2 <GPIO_INIT_PIN_DIRECTION+0x124>
     fd4:	87 c0       	rjmp	.+270    	; 0x10e4 <GPIO_INIT_PIN_DIRECTION+0x166>
	case PORT_A:
	ASSIGNBIT(DDRA , PINno , DIRECTION);
     fd6:	aa e3       	ldi	r26, 0x3A	; 58
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea e3       	ldi	r30, 0x3A	; 58
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_INIT_PIN_DIRECTION+0x74>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	2a 95       	dec	r18
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_INIT_PIN_DIRECTION+0x70>
     ff6:	80 95       	com	r24
     ff8:	48 23       	and	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	b9 01       	movw	r22, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_INIT_PIN_DIRECTION+0x90>
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_INIT_PIN_DIRECTION+0x8c>
    1012:	cb 01       	movw	r24, r22
    1014:	84 2b       	or	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	65 c0       	rjmp	.+202    	; 0x10e4 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_B:
	ASSIGNBIT(DDRB , PINno , DIRECTION);
    101a:	a7 e3       	ldi	r26, 0x37	; 55
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e7 e3       	ldi	r30, 0x37	; 55
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_INIT_PIN_DIRECTION+0xb8>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	2a 95       	dec	r18
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_INIT_PIN_DIRECTION+0xb4>
    103a:	80 95       	com	r24
    103c:	48 23       	and	r20, r24
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	b9 01       	movw	r22, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_INIT_PIN_DIRECTION+0xd4>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_INIT_PIN_DIRECTION+0xd0>
    1056:	cb 01       	movw	r24, r22
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	43 c0       	rjmp	.+134    	; 0x10e4 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_C:
	ASSIGNBIT(DDRC , PINno , DIRECTION);
    105e:	a4 e3       	ldi	r26, 0x34	; 52
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e4 e3       	ldi	r30, 0x34	; 52
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_INIT_PIN_DIRECTION+0xfc>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	2a 95       	dec	r18
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_INIT_PIN_DIRECTION+0xf8>
    107e:	80 95       	com	r24
    1080:	48 23       	and	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	b9 01       	movw	r22, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_INIT_PIN_DIRECTION+0x118>
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_INIT_PIN_DIRECTION+0x114>
    109a:	cb 01       	movw	r24, r22
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	21 c0       	rjmp	.+66     	; 0x10e4 <GPIO_INIT_PIN_DIRECTION+0x166>
	break;
	case PORT_D:
	ASSIGNBIT(DDRD , PINno , DIRECTION);
    10a2:	a1 e3       	ldi	r26, 0x31	; 49
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e3       	ldi	r30, 0x31	; 49
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_INIT_PIN_DIRECTION+0x140>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	2a 95       	dec	r18
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_INIT_PIN_DIRECTION+0x13c>
    10c2:	80 95       	com	r24
    10c4:	48 23       	and	r20, r24
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	b9 01       	movw	r22, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_INIT_PIN_DIRECTION+0x15c>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	8a 95       	dec	r24
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_INIT_PIN_DIRECTION+0x158>
    10de:	cb 01       	movw	r24, r22
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
	default:
	
	break;
	}

}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <GPIO_WRITE_PIN_VALUE>:

void GPIO_WRITE_PIN_VALUE(UINT8 PORT ,UINT8 PINno , UINT8 VALUE)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_WRITE_PIN_VALUE+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <GPIO_WRITE_PIN_VALUE+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	6a 83       	std	Y+2, r22	; 0x02
    1106:	4b 83       	std	Y+3, r20	; 0x03
	switch(PORT){
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3d 83       	std	Y+5, r19	; 0x05
    1110:	2c 83       	std	Y+4, r18	; 0x04
    1112:	6c 81       	ldd	r22, Y+4	; 0x04
    1114:	7d 81       	ldd	r23, Y+5	; 0x05
    1116:	61 30       	cpi	r22, 0x01	; 1
    1118:	71 05       	cpc	r23, r1
    111a:	d1 f1       	breq	.+116    	; 0x1190 <GPIO_WRITE_PIN_VALUE+0x9c>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	91 05       	cpc	r25, r1
    1124:	34 f4       	brge	.+12     	; 0x1132 <GPIO_WRITE_PIN_VALUE+0x3e>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	21 15       	cp	r18, r1
    112c:	31 05       	cpc	r19, r1
    112e:	71 f0       	breq	.+28     	; 0x114c <GPIO_WRITE_PIN_VALUE+0x58>
    1130:	94 c0       	rjmp	.+296    	; 0x125a <GPIO_WRITE_PIN_VALUE+0x166>
    1132:	6c 81       	ldd	r22, Y+4	; 0x04
    1134:	7d 81       	ldd	r23, Y+5	; 0x05
    1136:	62 30       	cpi	r22, 0x02	; 2
    1138:	71 05       	cpc	r23, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <GPIO_WRITE_PIN_VALUE+0x4a>
    113c:	4b c0       	rjmp	.+150    	; 0x11d4 <GPIO_WRITE_PIN_VALUE+0xe0>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <GPIO_WRITE_PIN_VALUE+0x56>
    1148:	67 c0       	rjmp	.+206    	; 0x1218 <GPIO_WRITE_PIN_VALUE+0x124>
    114a:	87 c0       	rjmp	.+270    	; 0x125a <GPIO_WRITE_PIN_VALUE+0x166>
	case PORT_A:
	ASSIGNBIT(PORTA , PINno , VALUE);
    114c:	ab e3       	ldi	r26, 0x3B	; 59
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e3       	ldi	r30, 0x3B	; 59
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_WRITE_PIN_VALUE+0x74>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	2a 95       	dec	r18
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_WRITE_PIN_VALUE+0x70>
    116c:	80 95       	com	r24
    116e:	48 23       	and	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_WRITE_PIN_VALUE+0x90>
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_WRITE_PIN_VALUE+0x8c>
    1188:	cb 01       	movw	r24, r22
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	65 c0       	rjmp	.+202    	; 0x125a <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_B:
	ASSIGNBIT(PORTB , PINno , VALUE);
    1190:	a8 e3       	ldi	r26, 0x38	; 56
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_WRITE_PIN_VALUE+0xb8>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	2a 95       	dec	r18
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_WRITE_PIN_VALUE+0xb4>
    11b0:	80 95       	com	r24
    11b2:	48 23       	and	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	b9 01       	movw	r22, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_WRITE_PIN_VALUE+0xd4>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_WRITE_PIN_VALUE+0xd0>
    11cc:	cb 01       	movw	r24, r22
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	43 c0       	rjmp	.+134    	; 0x125a <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_C:
	ASSIGNBIT(PORTC , PINno , VALUE);
    11d4:	a5 e3       	ldi	r26, 0x35	; 53
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e5 e3       	ldi	r30, 0x35	; 53
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_WRITE_PIN_VALUE+0xfc>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	2a 95       	dec	r18
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_WRITE_PIN_VALUE+0xf8>
    11f4:	80 95       	com	r24
    11f6:	48 23       	and	r20, r24
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	b9 01       	movw	r22, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_WRITE_PIN_VALUE+0x118>
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_WRITE_PIN_VALUE+0x114>
    1210:	cb 01       	movw	r24, r22
    1212:	84 2b       	or	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	21 c0       	rjmp	.+66     	; 0x125a <GPIO_WRITE_PIN_VALUE+0x166>
	break;
	case PORT_D:
	ASSIGNBIT(PORTD , PINno , VALUE);
    1218:	a2 e3       	ldi	r26, 0x32	; 50
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_WRITE_PIN_VALUE+0x140>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	2a 95       	dec	r18
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_WRITE_PIN_VALUE+0x13c>
    1238:	80 95       	com	r24
    123a:	48 23       	and	r20, r24
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	b9 01       	movw	r22, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_WRITE_PIN_VALUE+0x15c>
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_WRITE_PIN_VALUE+0x158>
    1254:	cb 01       	movw	r24, r22
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
	break;

	}
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <GPIO_READ_PIN_VALUE>:

UINT8 GPIO_READ_PIN_VALUE(UINT8 PORT ,UINT8 PINno)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <GPIO_READ_PIN_VALUE+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_READ_PIN_VALUE+0x8>
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	6b 83       	std	Y+3, r22	; 0x03
	UINT8 PIN;
	
	switch(PORT){
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	4c 81       	ldd	r20, Y+4	; 0x04
    1288:	5d 81       	ldd	r21, Y+5	; 0x05
    128a:	41 30       	cpi	r20, 0x01	; 1
    128c:	51 05       	cpc	r21, r1
    128e:	41 f1       	breq	.+80     	; 0x12e0 <GPIO_READ_PIN_VALUE+0x76>
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	91 05       	cpc	r25, r1
    1298:	34 f4       	brge	.+12     	; 0x12a6 <GPIO_READ_PIN_VALUE+0x3c>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	61 f0       	breq	.+24     	; 0x12bc <GPIO_READ_PIN_VALUE+0x52>
    12a4:	53 c0       	rjmp	.+166    	; 0x134c <GPIO_READ_PIN_VALUE+0xe2>
    12a6:	4c 81       	ldd	r20, Y+4	; 0x04
    12a8:	5d 81       	ldd	r21, Y+5	; 0x05
    12aa:	42 30       	cpi	r20, 0x02	; 2
    12ac:	51 05       	cpc	r21, r1
    12ae:	51 f1       	breq	.+84     	; 0x1304 <GPIO_READ_PIN_VALUE+0x9a>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	b9 f1       	breq	.+110    	; 0x1328 <GPIO_READ_PIN_VALUE+0xbe>
    12ba:	48 c0       	rjmp	.+144    	; 0x134c <GPIO_READ_PIN_VALUE+0xe2>
	case PORT_A:
	 PIN = GETBIT(PINA , PINno);
    12bc:	e9 e3       	ldi	r30, 0x39	; 57
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_READ_PIN_VALUE+0x6a>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_READ_PIN_VALUE+0x66>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	47 c0       	rjmp	.+142    	; 0x136e <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_B:
	 PIN = GETBIT(PINB , PINno);
    12e0:	e6 e3       	ldi	r30, 0x36	; 54
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a9 01       	movw	r20, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_READ_PIN_VALUE+0x8e>
    12f4:	55 95       	asr	r21
    12f6:	47 95       	ror	r20
    12f8:	8a 95       	dec	r24
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_READ_PIN_VALUE+0x8a>
    12fc:	ca 01       	movw	r24, r20
    12fe:	81 70       	andi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	35 c0       	rjmp	.+106    	; 0x136e <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_C:
	 PIN = GETBIT(PINC , PINno);
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_READ_PIN_VALUE+0xb2>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_READ_PIN_VALUE+0xae>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	23 c0       	rjmp	.+70     	; 0x136e <GPIO_READ_PIN_VALUE+0x104>
	break;
	case PORT_D:
	 PIN = GETBIT(PIND , PINno);
    1328:	e0 e3       	ldi	r30, 0x30	; 48
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_READ_PIN_VALUE+0xd6>
    133c:	55 95       	asr	r21
    133e:	47 95       	ror	r20
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_READ_PIN_VALUE+0xd2>
    1344:	ca 01       	movw	r24, r20
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	11 c0       	rjmp	.+34     	; 0x136e <GPIO_READ_PIN_VALUE+0x104>
	break;
	default:
	 PIN = GETBIT(PINA , PINno);
    134c:	e9 e3       	ldi	r30, 0x39	; 57
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_READ_PIN_VALUE+0xfa>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_READ_PIN_VALUE+0xf6>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	
	return PIN;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <GPIO_TOGGLE_PIN>:

void GPIO_TOGGLE_PIN(UINT8 PORT ,UINT8 PINno){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_TOGGLE_PIN+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <GPIO_TOGGLE_PIN+0x8>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	6a 83       	std	Y+2, r22	; 0x02

	switch(PORT){
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3c 83       	std	Y+4, r19	; 0x04
    1398:	2b 83       	std	Y+3, r18	; 0x03
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	49 f1       	breq	.+82     	; 0x13f6 <GPIO_TOGGLE_PIN+0x76>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <GPIO_TOGGLE_PIN+0x38>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	61 f0       	breq	.+24     	; 0x13ce <GPIO_TOGGLE_PIN+0x4e>
    13b6:	5a c0       	rjmp	.+180    	; 0x146c <GPIO_TOGGLE_PIN+0xec>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	71 f1       	breq	.+92     	; 0x141e <GPIO_TOGGLE_PIN+0x9e>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	e9 f1       	breq	.+122    	; 0x1446 <GPIO_TOGGLE_PIN+0xc6>
    13cc:	4f c0       	rjmp	.+158    	; 0x146c <GPIO_TOGGLE_PIN+0xec>
	case PORT_A:
		TOGGLEBIT(PORTA ,PINno );
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_TOGGLE_PIN+0x6c>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_TOGGLE_PIN+0x68>
    13f0:	84 27       	eor	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	3b c0       	rjmp	.+118    	; 0x146c <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_B:
		TOGGLEBIT(PORTB ,PINno );
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_TOGGLE_PIN+0x94>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_TOGGLE_PIN+0x90>
    1418:	84 27       	eor	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	27 c0       	rjmp	.+78     	; 0x146c <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_C:
		TOGGLEBIT(PORTC ,PINno );
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_TOGGLE_PIN+0xbc>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_TOGGLE_PIN+0xb8>
    1440:	84 27       	eor	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	13 c0       	rjmp	.+38     	; 0x146c <GPIO_TOGGLE_PIN+0xec>
	break;
	case PORT_D:
		TOGGLEBIT(PORTD ,PINno );
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_TOGGLE_PIN+0xe4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_TOGGLE_PIN+0xe0>
    1468:	84 27       	eor	r24, r20
    146a:	8c 93       	st	X, r24
	break;

	}
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <Stepper_Init>:

static void Stepper_Move_4Steps_Clockwise(void);
static void Stepper_Move_4Steps_CounterClockwise(void);


void Stepper_Init(){
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN3, OUTPUT);
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN4, OUTPUT);
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,PIN5, OUTPUT);

#elif MOTOR_TYPE == BIPOLAR
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_A, OUTPUT);
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_B, OUTPUT);
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_C, OUTPUT);
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	 GPIO_INIT_PIN_DIRECTION(MOTOR_PORT ,WINDING_D, OUTPUT);
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	63 e0       	ldi	r22, 0x03	; 3
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>

	GPIO_INIT_PORT_DIRECTION(MOTOR_PORT,OUTPUT);

#endif

}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <Stepper_Set_Time_Per_Revolution>:


void Stepper_Set_Time_Per_Revolution(UINT16 time_ms){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <Stepper_Set_Time_Per_Revolution+0x6>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
	delay_ms = time_ms / STEPS_PER_REVOLUTION; // time in milliseconds
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	20 e3       	ldi	r18, 0x30	; 48
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	b9 01       	movw	r22, r18
    14c8:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__udivmodhi4>
    14cc:	cb 01       	movw	r24, r22
    14ce:	80 93 1e 02 	sts	0x021E, r24

}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <Stepper_SetDirection>:




void Stepper_SetDirection(UINT8 direction){
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <Stepper_SetDirection+0x6>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01

	switch(direction){
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3b 83       	std	Y+3, r19	; 0x03
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	31 f0       	breq	.+12     	; 0x1508 <Stepper_SetDirection+0x2c>
    14fc:	2a 81       	ldd	r18, Y+2	; 0x02
    14fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1500:	21 30       	cpi	r18, 0x01	; 1
    1502:	31 05       	cpc	r19, r1
    1504:	21 f0       	breq	.+8      	; 0x150e <Stepper_SetDirection+0x32>
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <Stepper_SetDirection+0x38>
	case CLOCKWISE:
		motor_direction = CLOCKWISE;
    1508:	10 92 30 02 	sts	0x0230, r1
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <Stepper_SetDirection+0x38>
		break;
	case COUNTER_CLOCKWISE:
		motor_direction = COUNTER_CLOCKWISE;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 30 02 	sts	0x0230, r24
		break;
	}


}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <Stepper_Half_Revoloution>:



void Stepper_Half_Revoloution(void){
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <Stepper_Half_Revoloution+0x6>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	UINT8 i ;
	UINT8 x = STEPS_PER_REVOLUTION >> 3; //Divided by 8
    152a:	86 e0       	ldi	r24, 0x06	; 6
    152c:	89 83       	std	Y+1, r24	; 0x01

	if(motor_direction == CLOCKWISE){
    152e:	80 91 30 02 	lds	r24, 0x0230
    1532:	88 23       	and	r24, r24
    1534:	61 f4       	brne	.+24     	; 0x154e <Stepper_Half_Revoloution+0x2e>

		for(i = 0;i<x;i++){
    1536:	1a 82       	std	Y+2, r1	; 0x02
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <Stepper_Half_Revoloution+0x24>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_Clockwise();
    153a:	0e 94 1e 0b 	call	0x163c	; 0x163c <Stepper_Move_4Steps_Clockwise>
	UINT8 i ;
	UINT8 x = STEPS_PER_REVOLUTION >> 3; //Divided by 8

	if(motor_direction == CLOCKWISE){

		for(i = 0;i<x;i++){
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	98 17       	cp	r25, r24
    154a:	b8 f3       	brcs	.-18     	; 0x153a <Stepper_Half_Revoloution+0x1a>
    154c:	0f c0       	rjmp	.+30     	; 0x156c <Stepper_Half_Revoloution+0x4c>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_Clockwise();
		}

	}
	else if (motor_direction == COUNTER_CLOCKWISE){
    154e:	80 91 30 02 	lds	r24, 0x0230
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	59 f4       	brne	.+22     	; 0x156c <Stepper_Half_Revoloution+0x4c>

		for(i = 0;i<x;i++){
    1556:	1a 82       	std	Y+2, r1	; 0x02
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <Stepper_Half_Revoloution+0x44>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_CounterClockwise();
    155a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Stepper_Move_4Steps_CounterClockwise>
		}

	}
	else if (motor_direction == COUNTER_CLOCKWISE){

		for(i = 0;i<x;i++){
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	98 17       	cp	r25, r24
    156a:	b8 f3       	brcs	.-18     	; 0x155a <Stepper_Half_Revoloution+0x3a>
			Stepper_Move_4Steps_CounterClockwise();
		}

	}

}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <Stepper_Full_Revoloution>:

void Stepper_Full_Revoloution(void){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <Stepper_Full_Revoloution+0x6>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	UINT8 i ;
	UINT8 x = STEPS_PER_REVOLUTION >> 2; //Divided by 4
    1580:	8c e0       	ldi	r24, 0x0C	; 12
    1582:	89 83       	std	Y+1, r24	; 0x01

	if(motor_direction == CLOCKWISE){
    1584:	80 91 30 02 	lds	r24, 0x0230
    1588:	88 23       	and	r24, r24
    158a:	61 f4       	brne	.+24     	; 0x15a4 <Stepper_Full_Revoloution+0x2e>

		for(i = 0;i<x;i++){
    158c:	1a 82       	std	Y+2, r1	; 0x02
    158e:	05 c0       	rjmp	.+10     	; 0x159a <Stepper_Full_Revoloution+0x24>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_Clockwise();
    1590:	0e 94 1e 0b 	call	0x163c	; 0x163c <Stepper_Move_4Steps_Clockwise>
	UINT8 i ;
	UINT8 x = STEPS_PER_REVOLUTION >> 2; //Divided by 4

	if(motor_direction == CLOCKWISE){

		for(i = 0;i<x;i++){
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	98 17       	cp	r25, r24
    15a0:	b8 f3       	brcs	.-18     	; 0x1590 <Stepper_Full_Revoloution+0x1a>
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <Stepper_Full_Revoloution+0x4c>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_Clockwise();
		}

	}
	else if (motor_direction == COUNTER_CLOCKWISE){
    15a4:	80 91 30 02 	lds	r24, 0x0230
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	59 f4       	brne	.+22     	; 0x15c2 <Stepper_Full_Revoloution+0x4c>

		for(i = 0;i<x;i++){
    15ac:	1a 82       	std	Y+2, r1	; 0x02
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <Stepper_Full_Revoloution+0x44>
		/******* move 4 steps every iteration *******/
			Stepper_Move_4Steps_CounterClockwise();
    15b0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Stepper_Move_4Steps_CounterClockwise>
		}

	}
	else if (motor_direction == COUNTER_CLOCKWISE){

		for(i = 0;i<x;i++){
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	98 17       	cp	r25, r24
    15c0:	b8 f3       	brcs	.-18     	; 0x15b0 <Stepper_Full_Revoloution+0x3a>
		}

	}


}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <Stepper_One_Step_Clockwise>:

static void Stepper_One_Step_Clockwise(void){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62


}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <Stepper_One_Step_CounterClockwise>:

static void Stepper_One_Step_CounterClockwise(void){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62


}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <Stepper_Steps>:


#if MOTOR_TYPE == BIPOLAR
void Stepper_Steps(UINT8 steps){
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <Stepper_Steps+0x6>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8a 83       	std	Y+2, r24	; 0x02
	UINT8 i ;

	if(motor_direction == CLOCKWISE){
    15f4:	80 91 30 02 	lds	r24, 0x0230
    15f8:	88 23       	and	r24, r24
    15fa:	61 f4       	brne	.+24     	; 0x1614 <Stepper_Steps+0x2c>

		for(i = 0;i<steps;i++)
    15fc:	19 82       	std	Y+1, r1	; 0x01
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <Stepper_Steps+0x22>
		  Stepper_One_Step_Clockwise();
    1600:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <Stepper_One_Step_Clockwise>
void Stepper_Steps(UINT8 steps){
	UINT8 i ;

	if(motor_direction == CLOCKWISE){

		for(i = 0;i<steps;i++)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	99 81       	ldd	r25, Y+1	; 0x01
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	98 17       	cp	r25, r24
    1610:	b8 f3       	brcs	.-18     	; 0x1600 <Stepper_Steps+0x18>
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <Stepper_Steps+0x4a>
		  Stepper_One_Step_Clockwise();
		}
   else if(motor_direction == COUNTER_CLOCKWISE){
    1614:	80 91 30 02 	lds	r24, 0x0230
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	59 f4       	brne	.+22     	; 0x1632 <Stepper_Steps+0x4a>
		for(i = 0;i<steps;i++)
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	05 c0       	rjmp	.+10     	; 0x162a <Stepper_Steps+0x42>
		  Stepper_One_Step_CounterClockwise();
    1620:	0e 94 ed 0a 	call	0x15da	; 0x15da <Stepper_One_Step_CounterClockwise>

		for(i = 0;i<steps;i++)
		  Stepper_One_Step_Clockwise();
		}
   else if(motor_direction == COUNTER_CLOCKWISE){
		for(i = 0;i<steps;i++)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	99 81       	ldd	r25, Y+1	; 0x01
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	98 17       	cp	r25, r24
    1630:	b8 f3       	brcs	.-18     	; 0x1620 <Stepper_Steps+0x38>
		  Stepper_One_Step_CounterClockwise();
		}
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <Stepper_Move_4Steps_Clockwise>:

static void Stepper_Move_4Steps_Clockwise(void){
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	e8 97       	sbiw	r28, 0x38	; 56
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,HIGH);
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	62 e0       	ldi	r22, 0x02	; 2
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	63 e0       	ldi	r22, 0x03	; 3
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1678:	80 91 1e 02 	lds	r24, 0x021E
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8d ab       	std	Y+53, r24	; 0x35
    1692:	9e ab       	std	Y+54, r25	; 0x36
    1694:	af ab       	std	Y+55, r26	; 0x37
    1696:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6d a9       	ldd	r22, Y+53	; 0x35
    169a:	7e a9       	ldd	r23, Y+54	; 0x36
    169c:	8f a9       	ldd	r24, Y+55	; 0x37
    169e:	98 ad       	ldd	r25, Y+56	; 0x38
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	89 ab       	std	Y+49, r24	; 0x31
    16b2:	9a ab       	std	Y+50, r25	; 0x32
    16b4:	ab ab       	std	Y+51, r26	; 0x33
    16b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ba:	7a a9       	ldd	r23, Y+50	; 0x32
    16bc:	8b a9       	ldd	r24, Y+51	; 0x33
    16be:	9c a9       	ldd	r25, Y+52	; 0x34
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <Stepper_Move_4Steps_Clockwise+0x9e>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <Stepper_Move_4Steps_Clockwise+0x11c>
	else if (__tmp > 65535)
    16da:	69 a9       	ldd	r22, Y+49	; 0x31
    16dc:	7a a9       	ldd	r23, Y+50	; 0x32
    16de:	8b a9       	ldd	r24, Y+51	; 0x33
    16e0:	9c a9       	ldd	r25, Y+52	; 0x34
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <Stepper_Move_4Steps_Clockwise+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6d a9       	ldd	r22, Y+53	; 0x35
    16f4:	7e a9       	ldd	r23, Y+54	; 0x36
    16f6:	8f a9       	ldd	r24, Y+55	; 0x37
    16f8:	98 ad       	ldd	r25, Y+56	; 0x38
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	98 ab       	std	Y+48, r25	; 0x30
    1718:	8f a7       	std	Y+47, r24	; 0x2f
    171a:	0f c0       	rjmp	.+30     	; 0x173a <Stepper_Move_4Steps_Clockwise+0xfe>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1724:	8d a5       	ldd	r24, Y+45	; 0x2d
    1726:	9e a5       	ldd	r25, Y+46	; 0x2e
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <Stepper_Move_4Steps_Clockwise+0xec>
    172c:	9e a7       	std	Y+46, r25	; 0x2e
    172e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8f a5       	ldd	r24, Y+47	; 0x2f
    1732:	98 a9       	ldd	r25, Y+48	; 0x30
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8f a5       	ldd	r24, Y+47	; 0x2f
    173c:	98 a9       	ldd	r25, Y+48	; 0x30
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <Stepper_Move_4Steps_Clockwise+0xe0>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <Stepper_Move_4Steps_Clockwise+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	98 ab       	std	Y+48, r25	; 0x30
    1756:	8f a7       	std	Y+47, r24	; 0x2f
    1758:	8f a5       	ldd	r24, Y+47	; 0x2f
    175a:	98 a9       	ldd	r25, Y+48	; 0x30
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
    1760:	8b a5       	ldd	r24, Y+43	; 0x2b
    1762:	9c a5       	ldd	r25, Y+44	; 0x2c
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <Stepper_Move_4Steps_Clockwise+0x128>
    1768:	9c a7       	std	Y+44, r25	; 0x2c
    176a:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,HIGH);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	63 e0       	ldi	r22, 0x03	; 3
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1794:	80 91 1e 02 	lds	r24, 0x021E
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8f a3       	std	Y+39, r24	; 0x27
    17ae:	98 a7       	std	Y+40, r25	; 0x28
    17b0:	a9 a7       	std	Y+41, r26	; 0x29
    17b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6f a1       	ldd	r22, Y+39	; 0x27
    17b6:	78 a5       	ldd	r23, Y+40	; 0x28
    17b8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8b a3       	std	Y+35, r24	; 0x23
    17ce:	9c a3       	std	Y+36, r25	; 0x24
    17d0:	ad a3       	std	Y+37, r26	; 0x25
    17d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <Stepper_Move_4Steps_Clockwise+0x1ba>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9a a3       	std	Y+34, r25	; 0x22
    17f2:	89 a3       	std	Y+33, r24	; 0x21
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <Stepper_Move_4Steps_Clockwise+0x238>
	else if (__tmp > 65535)
    17f6:	6b a1       	ldd	r22, Y+35	; 0x23
    17f8:	7c a1       	ldd	r23, Y+36	; 0x24
    17fa:	8d a1       	ldd	r24, Y+37	; 0x25
    17fc:	9e a1       	ldd	r25, Y+38	; 0x26
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <Stepper_Move_4Steps_Clockwise+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6f a1       	ldd	r22, Y+39	; 0x27
    1810:	78 a5       	ldd	r23, Y+40	; 0x28
    1812:	89 a5       	ldd	r24, Y+41	; 0x29
    1814:	9a a5       	ldd	r25, Y+42	; 0x2a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <Stepper_Move_4Steps_Clockwise+0x21a>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	98 a3       	std	Y+32, r25	; 0x20
    183e:	8f 8f       	std	Y+31, r24	; 0x1f
    1840:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1842:	98 a1       	ldd	r25, Y+32	; 0x20
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <Stepper_Move_4Steps_Clockwise+0x208>
    1848:	98 a3       	std	Y+32, r25	; 0x20
    184a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9a a3       	std	Y+34, r25	; 0x22
    1854:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <Stepper_Move_4Steps_Clockwise+0x1fc>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <Stepper_Move_4Steps_Clockwise+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9a a3       	std	Y+34, r25	; 0x22
    1872:	89 a3       	std	Y+33, r24	; 0x21
    1874:	89 a1       	ldd	r24, Y+33	; 0x21
    1876:	9a a1       	ldd	r25, Y+34	; 0x22
    1878:	9e 8f       	std	Y+30, r25	; 0x1e
    187a:	8d 8f       	std	Y+29, r24	; 0x1d
    187c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <Stepper_Move_4Steps_Clockwise+0x244>
    1884:	9e 8f       	std	Y+30, r25	; 0x1e
    1886:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,HIGH);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    18a6:	83 e0       	ldi	r24, 0x03	; 3
    18a8:	63 e0       	ldi	r22, 0x03	; 3
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    18b0:	80 91 1e 02 	lds	r24, 0x021E
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	89 8f       	std	Y+25, r24	; 0x19
    18ca:	9a 8f       	std	Y+26, r25	; 0x1a
    18cc:	ab 8f       	std	Y+27, r26	; 0x1b
    18ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	69 8d       	ldd	r22, Y+25	; 0x19
    18d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8d 8b       	std	Y+21, r24	; 0x15
    18ea:	9e 8b       	std	Y+22, r25	; 0x16
    18ec:	af 8b       	std	Y+23, r26	; 0x17
    18ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <Stepper_Move_4Steps_Clockwise+0x2d6>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <Stepper_Move_4Steps_Clockwise+0x354>
	else if (__tmp > 65535)
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <Stepper_Move_4Steps_Clockwise+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9c 8b       	std	Y+20, r25	; 0x14
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <Stepper_Move_4Steps_Clockwise+0x336>
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9a 8b       	std	Y+18, r25	; 0x12
    195a:	89 8b       	std	Y+17, r24	; 0x11
    195c:	89 89       	ldd	r24, Y+17	; 0x11
    195e:	9a 89       	ldd	r25, Y+18	; 0x12
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <Stepper_Move_4Steps_Clockwise+0x324>
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <Stepper_Move_4Steps_Clockwise+0x318>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <Stepper_Move_4Steps_Clockwise+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	98 8b       	std	Y+16, r25	; 0x10
    1996:	8f 87       	std	Y+15, r24	; 0x0f
    1998:	8f 85       	ldd	r24, Y+15	; 0x0f
    199a:	98 89       	ldd	r25, Y+16	; 0x10
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <Stepper_Move_4Steps_Clockwise+0x360>
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,HIGH);
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    19cc:	80 91 1e 02 	lds	r24, 0x021E
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e0       	ldi	r26, 0x00	; 0
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8b 87       	std	Y+11, r24	; 0x0b
    19e6:	9c 87       	std	Y+12, r25	; 0x0c
    19e8:	ad 87       	std	Y+13, r26	; 0x0d
    19ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a ef       	ldi	r20, 0xFA	; 250
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8f 83       	std	Y+7, r24	; 0x07
    1a06:	98 87       	std	Y+8, r25	; 0x08
    1a08:	a9 87       	std	Y+9, r26	; 0x09
    1a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <Stepper_Move_4Steps_Clockwise+0x3f2>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <Stepper_Move_4Steps_Clockwise+0x470>
	else if (__tmp > 65535)
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <Stepper_Move_4Steps_Clockwise+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <Stepper_Move_4Steps_Clockwise+0x452>
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <Stepper_Move_4Steps_Clockwise+0x440>
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <Stepper_Move_4Steps_Clockwise+0x434>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <Stepper_Move_4Steps_Clockwise+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <Stepper_Move_4Steps_Clockwise+0x47c>
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
}
    1ac0:	e8 96       	adiw	r28, 0x38	; 56
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <Stepper_Move_4Steps_CounterClockwise>:

static void Stepper_Move_4Steps_CounterClockwise(void){
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	e8 97       	sbiw	r28, 0x38	; 56
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61

	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,HIGH);
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1b0e:	80 91 1e 02 	lds	r24, 0x021E
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8d ab       	std	Y+53, r24	; 0x35
    1b28:	9e ab       	std	Y+54, r25	; 0x36
    1b2a:	af ab       	std	Y+55, r26	; 0x37
    1b2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b30:	7e a9       	ldd	r23, Y+54	; 0x36
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a ef       	ldi	r20, 0xFA	; 250
    1b3c:	54 e4       	ldi	r21, 0x44	; 68
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 ab       	std	Y+49, r24	; 0x31
    1b48:	9a ab       	std	Y+50, r25	; 0x32
    1b4a:	ab ab       	std	Y+51, r26	; 0x33
    1b4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <Stepper_Move_4Steps_CounterClockwise+0x9e>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <Stepper_Move_4Steps_CounterClockwise+0x11c>
	else if (__tmp > 65535)
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <Stepper_Move_4Steps_CounterClockwise+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	98 ab       	std	Y+48, r25	; 0x30
    1bae:	8f a7       	std	Y+47, r24	; 0x2f
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <Stepper_Move_4Steps_CounterClockwise+0xfe>
    1bb2:	88 ec       	ldi	r24, 0xC8	; 200
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9e a7       	std	Y+46, r25	; 0x2e
    1bb8:	8d a7       	std	Y+45, r24	; 0x2d
    1bba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <Stepper_Move_4Steps_CounterClockwise+0xec>
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	98 ab       	std	Y+48, r25	; 0x30
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <Stepper_Move_4Steps_CounterClockwise+0xe0>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <Stepper_Move_4Steps_CounterClockwise+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
    1bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf2:	9c a7       	std	Y+44, r25	; 0x2c
    1bf4:	8b a7       	std	Y+43, r24	; 0x2b
    1bf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <Stepper_Move_4Steps_CounterClockwise+0x128>
    1bfe:	9c a7       	std	Y+44, r25	; 0x2c
    1c00:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,HIGH);
    1c16:	83 e0       	ldi	r24, 0x03	; 3
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1c2a:	80 91 1e 02 	lds	r24, 0x021E
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8f a3       	std	Y+39, r24	; 0x27
    1c44:	98 a7       	std	Y+40, r25	; 0x28
    1c46:	a9 a7       	std	Y+41, r26	; 0x29
    1c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8b a3       	std	Y+35, r24	; 0x23
    1c64:	9c a3       	std	Y+36, r25	; 0x24
    1c66:	ad a3       	std	Y+37, r26	; 0x25
    1c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c70:	9e a1       	ldd	r25, Y+38	; 0x26
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <Stepper_Move_4Steps_CounterClockwise+0x1ba>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <Stepper_Move_4Steps_CounterClockwise+0x238>
	else if (__tmp > 65535)
    1c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <Stepper_Move_4Steps_CounterClockwise+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    1caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <Stepper_Move_4Steps_CounterClockwise+0x21a>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	98 a3       	std	Y+32, r25	; 0x20
    1cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <Stepper_Move_4Steps_CounterClockwise+0x208>
    1cde:	98 a3       	std	Y+32, r25	; 0x20
    1ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	89 a1       	ldd	r24, Y+33	; 0x21
    1cee:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <Stepper_Move_4Steps_CounterClockwise+0x1fc>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <Stepper_Move_4Steps_CounterClockwise+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9a a3       	std	Y+34, r25	; 0x22
    1d08:	89 a3       	std	Y+33, r24	; 0x21
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d10:	8d 8f       	std	Y+29, r24	; 0x1d
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <Stepper_Move_4Steps_CounterClockwise+0x244>
    1d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,LOW);
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,HIGH);
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	62 e0       	ldi	r22, 0x02	; 2
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1d3c:	83 e0       	ldi	r24, 0x03	; 3
    1d3e:	63 e0       	ldi	r22, 0x03	; 3
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1d46:	80 91 1e 02 	lds	r24, 0x021E
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	89 8f       	std	Y+25, r24	; 0x19
    1d60:	9a 8f       	std	Y+26, r25	; 0x1a
    1d62:	ab 8f       	std	Y+27, r26	; 0x1b
    1d64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	69 8d       	ldd	r22, Y+25	; 0x19
    1d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a ef       	ldi	r20, 0xFA	; 250
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8d 8b       	std	Y+21, r24	; 0x15
    1d80:	9e 8b       	std	Y+22, r25	; 0x16
    1d82:	af 8b       	std	Y+23, r26	; 0x17
    1d84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <Stepper_Move_4Steps_CounterClockwise+0x2d6>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <Stepper_Move_4Steps_CounterClockwise+0x354>
	else if (__tmp > 65535)
    1da8:	6d 89       	ldd	r22, Y+21	; 0x15
    1daa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dac:	8f 89       	ldd	r24, Y+23	; 0x17
    1dae:	98 8d       	ldd	r25, Y+24	; 0x18
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <Stepper_Move_4Steps_CounterClockwise+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <Stepper_Move_4Steps_CounterClockwise+0x336>
    1dea:	88 ec       	ldi	r24, 0xC8	; 200
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	9a 89       	ldd	r25, Y+18	; 0x12
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <Stepper_Move_4Steps_CounterClockwise+0x324>
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1e00:	9c 89       	ldd	r25, Y+20	; 0x14
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <Stepper_Move_4Steps_CounterClockwise+0x318>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <Stepper_Move_4Steps_CounterClockwise+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6d 89       	ldd	r22, Y+21	; 0x15
    1e14:	7e 89       	ldd	r23, Y+22	; 0x16
    1e16:	8f 89       	ldd	r24, Y+23	; 0x17
    1e18:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
    1e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e30:	98 89       	ldd	r25, Y+16	; 0x10
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <Stepper_Move_4Steps_CounterClockwise+0x360>
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_A,HIGH);
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_B,LOW);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_C,LOW);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	62 e0       	ldi	r22, 0x02	; 2
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(MOTOR_PORT,WINDING_D,LOW);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	63 e0       	ldi	r22, 0x03	; 3
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	_delay_ms(delay_ms);
    1e62:	80 91 1e 02 	lds	r24, 0x021E
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8b 87       	std	Y+11, r24	; 0x0b
    1e7c:	9c 87       	std	Y+12, r25	; 0x0c
    1e7e:	ad 87       	std	Y+13, r26	; 0x0d
    1e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8f 83       	std	Y+7, r24	; 0x07
    1e9c:	98 87       	std	Y+8, r25	; 0x08
    1e9e:	a9 87       	std	Y+9, r26	; 0x09
    1ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <Stepper_Move_4Steps_CounterClockwise+0x3f2>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <Stepper_Move_4Steps_CounterClockwise+0x470>
	else if (__tmp > 65535)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <Stepper_Move_4Steps_CounterClockwise+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <Stepper_Move_4Steps_CounterClockwise+0x452>
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <Stepper_Move_4Steps_CounterClockwise+0x440>
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <Stepper_Move_4Steps_CounterClockwise+0x434>
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <Stepper_Move_4Steps_CounterClockwise+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <Stepper_Move_4Steps_CounterClockwise+0x47c>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
}
    1f56:	e8 96       	adiw	r28, 0x38	; 56
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <LCD_WriteCommand>:
#include "../../MCAL/GPIO/GPIO_CONFIG.h"
#include <util/delay.h>  // so i can use _dealy_ms() function


static void LCD_WriteCommand(UINT8 Command)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	6d 97       	sbiw	r28, 0x1d	; 29
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(RS_PORT, RS_PIN, LOW);  // so i can write command
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	64 e0       	ldi	r22, 0x04	; 4
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(RW_PORT, RW_PIN, LOW); //  to tell the lcd that i am going to write data
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	65 e0       	ldi	r22, 0x05	; 5
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PORT_VALUE(LCD_PORT, Command); // passing the command through the lcd_port
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f96:	0e 94 26 07 	call	0xe4c	; 0xe4c <GPIO_WRITE_PORT_VALUE>
	GPIO_WRITE_PIN_VALUE(EN_PORT, EN_PIN, HIGH); // activating the enable
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	66 e0       	ldi	r22, 0x06	; 6
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e4       	ldi	r27, 0x40	; 64
    1fac:	89 8f       	std	Y+25, r24	; 0x19
    1fae:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8d 8b       	std	Y+21, r24	; 0x15
    1fce:	9e 8b       	std	Y+22, r25	; 0x16
    1fd0:	af 8b       	std	Y+23, r26	; 0x17
    1fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_WriteCommand+0x8e>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_WriteCommand+0x10c>
	else if (__tmp > 65535)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_WriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_WriteCommand+0xee>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_WriteCommand+0xdc>
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_WriteCommand+0xd0>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_WriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_WriteCommand+0x118>
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	GPIO_WRITE_PIN_VALUE(EN_PORT, EN_PIN, LOW); // disabling the enable
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	66 e0       	ldi	r22, 0x06	; 6
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e4       	ldi	r27, 0x40	; 64
    209a:	8b 87       	std	Y+11, r24	; 0x0b
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	ad 87       	std	Y+13, r26	; 0x0d
    20a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a ef       	ldi	r20, 0xFA	; 250
    20b0:	54 e4       	ldi	r21, 0x44	; 68
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8f 83       	std	Y+7, r24	; 0x07
    20bc:	98 87       	std	Y+8, r25	; 0x08
    20be:	a9 87       	std	Y+9, r26	; 0x09
    20c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_WriteCommand+0x17c>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_WriteCommand+0x1fa>
	else if (__tmp > 65535)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_WriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_WriteCommand+0x1dc>
    2126:	88 ec       	ldi	r24, 0xC8	; 200
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_WriteCommand+0x1ca>
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_WriteCommand+0x1be>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_WriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_WriteCommand+0x206>
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2176:	6d 96       	adiw	r28, 0x1d	; 29
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <LCD_Init>:

void LCD_Init(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	e8 97       	sbiw	r28, 0x38	; 56
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a8 e4       	ldi	r26, 0x48	; 72
    21a2:	b2 e4       	ldi	r27, 0x42	; 66
    21a4:	8d ab       	std	Y+53, r24	; 0x35
    21a6:	9e ab       	std	Y+54, r25	; 0x36
    21a8:	af ab       	std	Y+55, r26	; 0x37
    21aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	89 ab       	std	Y+49, r24	; 0x31
    21c6:	9a ab       	std	Y+50, r25	; 0x32
    21c8:	ab ab       	std	Y+51, r26	; 0x33
    21ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <LCD_Init+0x66>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	98 ab       	std	Y+48, r25	; 0x30
    21ea:	8f a7       	std	Y+47, r24	; 0x2f
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <LCD_Init+0xe4>
	else if (__tmp > 65535)
    21ee:	69 a9       	ldd	r22, Y+49	; 0x31
    21f0:	7a a9       	ldd	r23, Y+50	; 0x32
    21f2:	8b a9       	ldd	r24, Y+51	; 0x33
    21f4:	9c a9       	ldd	r25, Y+52	; 0x34
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6d a9       	ldd	r22, Y+53	; 0x35
    2208:	7e a9       	ldd	r23, Y+54	; 0x36
    220a:	8f a9       	ldd	r24, Y+55	; 0x37
    220c:	98 ad       	ldd	r25, Y+56	; 0x38
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
    222e:	0f c0       	rjmp	.+30     	; 0x224e <LCD_Init+0xc6>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e a7       	std	Y+46, r25	; 0x2e
    2236:	8d a7       	std	Y+45, r24	; 0x2d
    2238:	8d a5       	ldd	r24, Y+45	; 0x2d
    223a:	9e a5       	ldd	r25, Y+46	; 0x2e
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_Init+0xb4>
    2240:	9e a7       	std	Y+46, r25	; 0x2e
    2242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <LCD_Init+0xa8>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	9c a7       	std	Y+44, r25	; 0x2c
    2272:	8b a7       	std	Y+43, r24	; 0x2b
    2274:	8b a5       	ldd	r24, Y+43	; 0x2b
    2276:	9c a5       	ldd	r25, Y+44	; 0x2c
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_Init+0xf0>
    227c:	9c a7       	std	Y+44, r25	; 0x2c
    227e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time

	GPIO_INIT_PORT_DIRECTION(LCD_PORT ,OUTPUT);  // IO Pins Init
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	0e 94 c9 06 	call	0xd92	; 0xd92 <GPIO_INIT_PORT_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(RS_PORT,RS_PIN,OUTPUT);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	64 e0       	ldi	r22, 0x04	; 4
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(EN_PORT,EN_PIN,OUTPUT);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	66 e0       	ldi	r22, 0x06	; 6
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(RW_PORT,RW_PIN,OUTPUT);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	65 e0       	ldi	r22, 0x05	; 5
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>

	LCD_WriteCommand(LCD_8BIT_2_LINE_5_x_7); 
    22a6:	88 e3       	ldi	r24, 0x38	; 56
    22a8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e8       	ldi	r26, 0x80	; 128
    22b2:	bf e3       	ldi	r27, 0x3F	; 63
    22b4:	8f a3       	std	Y+39, r24	; 0x27
    22b6:	98 a7       	std	Y+40, r25	; 0x28
    22b8:	a9 a7       	std	Y+41, r26	; 0x29
    22ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6f a1       	ldd	r22, Y+39	; 0x27
    22be:	78 a5       	ldd	r23, Y+40	; 0x28
    22c0:	89 a5       	ldd	r24, Y+41	; 0x29
    22c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8b a3       	std	Y+35, r24	; 0x23
    22d6:	9c a3       	std	Y+36, r25	; 0x24
    22d8:	ad a3       	std	Y+37, r26	; 0x25
    22da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22dc:	6b a1       	ldd	r22, Y+35	; 0x23
    22de:	7c a1       	ldd	r23, Y+36	; 0x24
    22e0:	8d a1       	ldd	r24, Y+37	; 0x25
    22e2:	9e a1       	ldd	r25, Y+38	; 0x26
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <LCD_Init+0x176>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9a a3       	std	Y+34, r25	; 0x22
    22fa:	89 a3       	std	Y+33, r24	; 0x21
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <LCD_Init+0x1f4>
	else if (__tmp > 65535)
    22fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2300:	7c a1       	ldd	r23, Y+36	; 0x24
    2302:	8d a1       	ldd	r24, Y+37	; 0x25
    2304:	9e a1       	ldd	r25, Y+38	; 0x26
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <LCD_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6f a1       	ldd	r22, Y+39	; 0x27
    2318:	78 a5       	ldd	r23, Y+40	; 0x28
    231a:	89 a5       	ldd	r24, Y+41	; 0x29
    231c:	9a a5       	ldd	r25, Y+42	; 0x2a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9a a3       	std	Y+34, r25	; 0x22
    233c:	89 a3       	std	Y+33, r24	; 0x21
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_Init+0x1d6>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	98 a3       	std	Y+32, r25	; 0x20
    2346:	8f 8f       	std	Y+31, r24	; 0x1f
    2348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    234a:	98 a1       	ldd	r25, Y+32	; 0x20
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_Init+0x1c4>
    2350:	98 a3       	std	Y+32, r25	; 0x20
    2352:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	89 a1       	ldd	r24, Y+33	; 0x21
    2356:	9a a1       	ldd	r25, Y+34	; 0x22
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9a a3       	std	Y+34, r25	; 0x22
    235c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_Init+0x1b8>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <LCD_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6b a1       	ldd	r22, Y+35	; 0x23
    236a:	7c a1       	ldd	r23, Y+36	; 0x24
    236c:	8d a1       	ldd	r24, Y+37	; 0x25
    236e:	9e a1       	ldd	r25, Y+38	; 0x26
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9a a3       	std	Y+34, r25	; 0x22
    237a:	89 a3       	std	Y+33, r24	; 0x21
    237c:	89 a1       	ldd	r24, Y+33	; 0x21
    237e:	9a a1       	ldd	r25, Y+34	; 0x22
    2380:	9e 8f       	std	Y+30, r25	; 0x1e
    2382:	8d 8f       	std	Y+29, r24	; 0x1d
    2384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_Init+0x200>
    238c:	9e 8f       	std	Y+30, r25	; 0x1e
    238e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
	LCD_WriteCommand(LCD_DISPLAY_ON_CURSOR_OFF); 
    2390:	8c e0       	ldi	r24, 0x0C	; 12
    2392:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a0 e8       	ldi	r26, 0x80	; 128
    239c:	bf e3       	ldi	r27, 0x3F	; 63
    239e:	89 8f       	std	Y+25, r24	; 0x19
    23a0:	9a 8f       	std	Y+26, r25	; 0x1a
    23a2:	ab 8f       	std	Y+27, r26	; 0x1b
    23a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a6:	69 8d       	ldd	r22, Y+25	; 0x19
    23a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8d 8b       	std	Y+21, r24	; 0x15
    23c0:	9e 8b       	std	Y+22, r25	; 0x16
    23c2:	af 8b       	std	Y+23, r26	; 0x17
    23c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c6:	6d 89       	ldd	r22, Y+21	; 0x15
    23c8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ca:	8f 89       	ldd	r24, Y+23	; 0x17
    23cc:	98 8d       	ldd	r25, Y+24	; 0x18
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23da:	88 23       	and	r24, r24
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <LCD_Init+0x260>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9c 8b       	std	Y+20, r25	; 0x14
    23e4:	8b 8b       	std	Y+19, r24	; 0x13
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <LCD_Init+0x2de>
	else if (__tmp > 65535)
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	4c f5       	brge	.+82     	; 0x2452 <LCD_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	69 8d       	ldd	r22, Y+25	; 0x19
    2402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9c 8b       	std	Y+20, r25	; 0x14
    2426:	8b 8b       	std	Y+19, r24	; 0x13
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <LCD_Init+0x2c0>
    242a:	88 ec       	ldi	r24, 0xC8	; 200
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9a 8b       	std	Y+18, r25	; 0x12
    2430:	89 8b       	std	Y+17, r24	; 0x11
    2432:	89 89       	ldd	r24, Y+17	; 0x11
    2434:	9a 89       	ldd	r25, Y+18	; 0x12
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_Init+0x2ae>
    243a:	9a 8b       	std	Y+18, r25	; 0x12
    243c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	69 f7       	brne	.-38     	; 0x242a <LCD_Init+0x2a2>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <LCD_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	6d 89       	ldd	r22, Y+21	; 0x15
    2454:	7e 89       	ldd	r23, Y+22	; 0x16
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
    2466:	8b 89       	ldd	r24, Y+19	; 0x13
    2468:	9c 89       	ldd	r25, Y+20	; 0x14
    246a:	98 8b       	std	Y+16, r25	; 0x10
    246c:	8f 87       	std	Y+15, r24	; 0x0f
    246e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2470:	98 89       	ldd	r25, Y+16	; 0x10
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <LCD_Init+0x2ea>
    2476:	98 8b       	std	Y+16, r25	; 0x10
    2478:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);    //delay 1ms
	LCD_WriteCommand(LCD_CLEAR_ALSO_DDRAM); //clear LCD
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 ea       	ldi	r26, 0xA0	; 160
    2486:	b1 e4       	ldi	r27, 0x41	; 65
    2488:	8b 87       	std	Y+11, r24	; 0x0b
    248a:	9c 87       	std	Y+12, r25	; 0x0c
    248c:	ad 87       	std	Y+13, r26	; 0x0d
    248e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a ef       	ldi	r20, 0xFA	; 250
    249e:	54 e4       	ldi	r21, 0x44	; 68
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	98 87       	std	Y+8, r25	; 0x08
    24ac:	a9 87       	std	Y+9, r26	; 0x09
    24ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <LCD_Init+0x34a>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <LCD_Init+0x3c8>
	else if (__tmp > 65535)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <LCD_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_Init+0x3aa>
    2514:	88 ec       	ldi	r24, 0xC8	; 200
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_Init+0x398>
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <LCD_Init+0x38c>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <LCD_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_Init+0x3d4>
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_WriteCommand(LCD_ENTRY_MODE);
    2564:	86 e0       	ldi	r24, 0x06	; 6
    2566:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>
	//LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_1ST_LINE);

}
    256a:	e8 96       	adiw	r28, 0x38	; 56
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <LCD_WriteData>:

void LCD_WriteData(UINT8 Data)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	6d 97       	sbiw	r28, 0x1d	; 29
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WRITE_PIN_VALUE(RS_PORT,RS_PIN,HIGH );
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	64 e0       	ldi	r22, 0x04	; 4
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(RW_PORT,RW_PIN,LOW);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	65 e0       	ldi	r22, 0x05	; 5
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>

	GPIO_WRITE_PORT_VALUE(LCD_PORT , Data) ;
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25aa:	0e 94 26 07 	call	0xe4c	; 0xe4c <GPIO_WRITE_PORT_VALUE>
	GPIO_WRITE_PIN_VALUE(EN_PORT,EN_PIN,HIGH);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	66 e0       	ldi	r22, 0x06	; 6
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a0 e0       	ldi	r26, 0x00	; 0
    25be:	b0 e4       	ldi	r27, 0x40	; 64
    25c0:	89 8f       	std	Y+25, r24	; 0x19
    25c2:	9a 8f       	std	Y+26, r25	; 0x1a
    25c4:	ab 8f       	std	Y+27, r26	; 0x1b
    25c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c8:	69 8d       	ldd	r22, Y+25	; 0x19
    25ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a ef       	ldi	r20, 0xFA	; 250
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8d 8b       	std	Y+21, r24	; 0x15
    25e2:	9e 8b       	std	Y+22, r25	; 0x16
    25e4:	af 8b       	std	Y+23, r26	; 0x17
    25e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25e8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ea:	7e 89       	ldd	r23, Y+22	; 0x16
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e8       	ldi	r20, 0x80	; 128
    25f6:	5f e3       	ldi	r21, 0x3F	; 63
    25f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fc:	88 23       	and	r24, r24
    25fe:	2c f4       	brge	.+10     	; 0x260a <LCD_WriteData+0x8e>
		__ticks = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9c 8b       	std	Y+20, r25	; 0x14
    2606:	8b 8b       	std	Y+19, r24	; 0x13
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <LCD_WriteData+0x10c>
	else if (__tmp > 65535)
    260a:	6d 89       	ldd	r22, Y+21	; 0x15
    260c:	7e 89       	ldd	r23, Y+22	; 0x16
    260e:	8f 89       	ldd	r24, Y+23	; 0x17
    2610:	98 8d       	ldd	r25, Y+24	; 0x18
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	3f ef       	ldi	r19, 0xFF	; 255
    2616:	4f e7       	ldi	r20, 0x7F	; 127
    2618:	57 e4       	ldi	r21, 0x47	; 71
    261a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261e:	18 16       	cp	r1, r24
    2620:	4c f5       	brge	.+82     	; 0x2674 <LCD_WriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	69 8d       	ldd	r22, Y+25	; 0x19
    2624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9c 8b       	std	Y+20, r25	; 0x14
    2648:	8b 8b       	std	Y+19, r24	; 0x13
    264a:	0f c0       	rjmp	.+30     	; 0x266a <LCD_WriteData+0xee>
    264c:	88 ec       	ldi	r24, 0xC8	; 200
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9a 8b       	std	Y+18, r25	; 0x12
    2652:	89 8b       	std	Y+17, r24	; 0x11
    2654:	89 89       	ldd	r24, Y+17	; 0x11
    2656:	9a 89       	ldd	r25, Y+18	; 0x12
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_WriteData+0xdc>
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	8b 89       	ldd	r24, Y+19	; 0x13
    2662:	9c 89       	ldd	r25, Y+20	; 0x14
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9c 8b       	std	Y+20, r25	; 0x14
    2668:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	8b 89       	ldd	r24, Y+19	; 0x13
    266c:	9c 89       	ldd	r25, Y+20	; 0x14
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f7       	brne	.-38     	; 0x264c <LCD_WriteData+0xd0>
    2672:	14 c0       	rjmp	.+40     	; 0x269c <LCD_WriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	6d 89       	ldd	r22, Y+21	; 0x15
    2676:	7e 89       	ldd	r23, Y+22	; 0x16
    2678:	8f 89       	ldd	r24, Y+23	; 0x17
    267a:	98 8d       	ldd	r25, Y+24	; 0x18
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
    2688:	8b 89       	ldd	r24, Y+19	; 0x13
    268a:	9c 89       	ldd	r25, Y+20	; 0x14
    268c:	98 8b       	std	Y+16, r25	; 0x10
    268e:	8f 87       	std	Y+15, r24	; 0x0f
    2690:	8f 85       	ldd	r24, Y+15	; 0x0f
    2692:	98 89       	ldd	r25, Y+16	; 0x10
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_WriteData+0x118>
    2698:	98 8b       	std	Y+16, r25	; 0x10
    269a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	GPIO_WRITE_PIN_VALUE(EN_PORT,EN_PIN,LOW);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	66 e0       	ldi	r22, 0x06	; 6
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e0       	ldi	r26, 0x00	; 0
    26ac:	b0 e4       	ldi	r27, 0x40	; 64
    26ae:	8b 87       	std	Y+11, r24	; 0x0b
    26b0:	9c 87       	std	Y+12, r25	; 0x0c
    26b2:	ad 87       	std	Y+13, r26	; 0x0d
    26b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8f 83       	std	Y+7, r24	; 0x07
    26d0:	98 87       	std	Y+8, r25	; 0x08
    26d2:	a9 87       	std	Y+9, r26	; 0x09
    26d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <LCD_WriteData+0x17c>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9e 83       	std	Y+6, r25	; 0x06
    26f4:	8d 83       	std	Y+5, r24	; 0x05
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <LCD_WriteData+0x1fa>
	else if (__tmp > 65535)
    26f8:	6f 81       	ldd	r22, Y+7	; 0x07
    26fa:	78 85       	ldd	r23, Y+8	; 0x08
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <LCD_WriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <LCD_WriteData+0x1dc>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9c 83       	std	Y+4, r25	; 0x04
    2740:	8b 83       	std	Y+3, r24	; 0x03
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_WriteData+0x1ca>
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <LCD_WriteData+0x1be>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <LCD_WriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_WriteData+0x206>
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    278a:	6d 96       	adiw	r28, 0x1d	; 29
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <LCD_WriteSentence>:



void LCD_WriteSentence(UINT8 *PtrSentance)
	
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <LCD_WriteSentence+0x6>
    27a2:	0f 92       	push	r0
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	9b 83       	std	Y+3, r25	; 0x03
    27aa:	8a 83       	std	Y+2, r24	; 0x02
    UINT8 i=0;
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	0e c0       	rjmp	.+28     	; 0x27cc <LCD_WriteSentence+0x30>
	
	while( PtrSentance[i] != '\0' )
	{
	  LCD_WriteData( PtrSentance[i] ) ;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	fc 01       	movw	r30, r24
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	80 81       	ld	r24, Z
    27c2:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_WriteData>
          i++ ;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	89 83       	std	Y+1, r24	; 0x01
void LCD_WriteSentence(UINT8 *PtrSentance)
	
{
    UINT8 i=0;
	
	while( PtrSentance[i] != '\0' )
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	fc 01       	movw	r30, r24
    27d8:	e2 0f       	add	r30, r18
    27da:	f3 1f       	adc	r31, r19
    27dc:	80 81       	ld	r24, Z
    27de:	88 23       	and	r24, r24
    27e0:	39 f7       	brne	.-50     	; 0x27b0 <LCD_WriteSentence+0x14>
	{
	  LCD_WriteData( PtrSentance[i] ) ;
          i++ ;
        }	

}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <LCD_Clear>:

void LCD_Clear(void)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62

       LCD_WriteCommand(LCD_CLEAR_ALSO_DDRAM) ;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>

}
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <LCD_1st_Line>:

void LCD_1st_Line(void){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_1ST_LINE) ;
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>

}
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <LCD_2nd_Line>:
void LCD_2nd_Line(void){
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(FORCE_CURSOR_TO_BEGINNING_2ND_LINE) ;
    281e:	80 ec       	ldi	r24, 0xC0	; 192
    2820:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_WriteCommand>

}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <Keypad_Init>:
#include<util/delay.h>

static const UINT8 keypad_array[ROW][COL] =  { KEYPAD_ARRAY };   //more readable


void Keypad_Init(void){
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
  
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R1_PIN, OUTPUT);
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R2_PIN, OUTPUT);
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R3_PIN, OUTPUT);
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, R4_PIN, OUTPUT);
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>

	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R1_PIN, HIGH);
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R2_PIN, HIGH);
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R3_PIN, HIGH);
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	62 e0       	ldi	r22, 0x02	; 2
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, R4_PIN, HIGH);
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	63 e0       	ldi	r22, 0x03	; 3
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>

	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C1_PIN, INPUT);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C2_PIN, INPUT);
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	65 e0       	ldi	r22, 0x05	; 5
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C3_PIN, INPUT);
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	66 e0       	ldi	r22, 0x06	; 6
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	GPIO_INIT_PIN_DIRECTION(KEYPAD_PORT, C4_PIN, INPUT);
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	67 e0       	ldi	r22, 0x07	; 7
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPIO_INIT_PIN_DIRECTION>
	
	//Using Internal Pull Up 
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C1_PIN, HIGH);
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	64 e0       	ldi	r22, 0x04	; 4
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C2_PIN, HIGH);
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	65 e0       	ldi	r22, 0x05	; 5
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C3_PIN, HIGH);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	66 e0       	ldi	r22, 0x06	; 6
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
	GPIO_WRITE_PIN_VALUE(KEYPAD_PORT, C4_PIN, HIGH);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	67 e0       	ldi	r22, 0x07	; 7
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>

}
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <Keypad_GetKey>:




UINT8 Keypad_GetKey(void)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	61 97       	sbiw	r28, 0x11	; 17
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
  UINT8 ROWCOUNT;
	UINT8 COLCOUNT;
	UINT8 RESULT = NO_KEY_IS_PRESSED;
    28ec:	8a ef       	ldi	r24, 0xFA	; 250
    28ee:	8f 87       	std	Y+15, r24	; 0x0f
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
    28f0:	19 8a       	std	Y+17, r1	; 0x11
    28f2:	ab c0       	rjmp	.+342    	; 0x2a4a <Keypad_GetKey+0x172>
	{
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , LOW);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	69 89       	ldd	r22, Y+17	; 0x11
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
		for (COLCOUNT=COL_INT ;COLCOUNT<=COL_END ;COLCOUNT++)
    28fe:	84 e0       	ldi	r24, 0x04	; 4
    2900:	88 8b       	std	Y+16, r24	; 0x10
    2902:	97 c0       	rjmp	.+302    	; 0x2a32 <Keypad_GetKey+0x15a>
		{
			if(GPIO_READ_PIN_VALUE(KEYPAD_PORT,COLCOUNT)==LOW)
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	68 89       	ldd	r22, Y+16	; 0x10
    2908:	0e 94 35 09 	call	0x126a	; 0x126a <GPIO_READ_PIN_VALUE>
    290c:	88 23       	and	r24, r24
    290e:	09 f0       	breq	.+2      	; 0x2912 <Keypad_GetKey+0x3a>
    2910:	8d c0       	rjmp	.+282    	; 0x2a2c <Keypad_GetKey+0x154>
			{
				RESULT=keypad_array[ROWCOUNT][COLCOUNT-COL_INT];
    2912:	89 89       	ldd	r24, Y+17	; 0x11
    2914:	48 2f       	mov	r20, r24
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	88 89       	ldd	r24, Y+16	; 0x10
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 01       	movw	r18, r24
    2920:	24 50       	subi	r18, 0x04	; 4
    2922:	30 40       	sbci	r19, 0x00	; 0
    2924:	ca 01       	movw	r24, r20
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	82 0f       	add	r24, r18
    2930:	93 1f       	adc	r25, r19
    2932:	fc 01       	movw	r30, r24
    2934:	e0 5e       	subi	r30, 0xE0	; 224
    2936:	fd 4f       	sbci	r31, 0xFD	; 253
    2938:	80 81       	ld	r24, Z
    293a:	8f 87       	std	Y+15, r24	; 0x0f
				 /* because we don't use timer we use this condition for one press */
				while(GPIO_READ_PIN_VALUE(KEYPAD_PORT,COLCOUNT)==LOW);
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	68 89       	ldd	r22, Y+16	; 0x10
    2940:	0e 94 35 09 	call	0x126a	; 0x126a <GPIO_READ_PIN_VALUE>
    2944:	88 23       	and	r24, r24
    2946:	d1 f3       	breq	.-12     	; 0x293c <Keypad_GetKey+0x64>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e2       	ldi	r26, 0x20	; 32
    294e:	b1 e4       	ldi	r27, 0x41	; 65
    2950:	8b 87       	std	Y+11, r24	; 0x0b
    2952:	9c 87       	std	Y+12, r25	; 0x0c
    2954:	ad 87       	std	Y+13, r26	; 0x0d
    2956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6b 85       	ldd	r22, Y+11	; 0x0b
    295a:	7c 85       	ldd	r23, Y+12	; 0x0c
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8f 83       	std	Y+7, r24	; 0x07
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	a9 87       	std	Y+9, r26	; 0x09
    2976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <Keypad_GetKey+0xc2>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <Keypad_GetKey+0x140>
	else if (__tmp > 65535)
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	89 85       	ldd	r24, Y+9	; 0x09
    29a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <Keypad_GetKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <Keypad_GetKey+0x122>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <Keypad_GetKey+0x110>
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <Keypad_GetKey+0x104>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <Keypad_GetKey+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <Keypad_GetKey+0x14c>
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	UINT8 COLCOUNT;
	UINT8 RESULT = NO_KEY_IS_PRESSED;
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
	{
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , LOW);
		for (COLCOUNT=COL_INT ;COLCOUNT<=COL_END ;COLCOUNT++)
    2a2c:	88 89       	ldd	r24, Y+16	; 0x10
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	88 8b       	std	Y+16, r24	; 0x10
    2a32:	88 89       	ldd	r24, Y+16	; 0x10
    2a34:	88 30       	cpi	r24, 0x08	; 8
    2a36:	08 f4       	brcc	.+2      	; 0x2a3a <Keypad_GetKey+0x162>
    2a38:	65 cf       	rjmp	.-310    	; 0x2904 <Keypad_GetKey+0x2c>
				_delay_ms(10);  //to avoid bouncing
			}
			
		}
    
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , HIGH);  //deactivate again
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	69 89       	ldd	r22, Y+17	; 0x11
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_WRITE_PIN_VALUE>
UINT8 Keypad_GetKey(void)
{
  UINT8 ROWCOUNT;
	UINT8 COLCOUNT;
	UINT8 RESULT = NO_KEY_IS_PRESSED;
	for(ROWCOUNT=ROW_INT; ROWCOUNT<=ROW_END ;ROWCOUNT++)
    2a44:	89 89       	ldd	r24, Y+17	; 0x11
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	89 8b       	std	Y+17, r24	; 0x11
    2a4a:	89 89       	ldd	r24, Y+17	; 0x11
    2a4c:	84 30       	cpi	r24, 0x04	; 4
    2a4e:	08 f4       	brcc	.+2      	; 0x2a52 <Keypad_GetKey+0x17a>
    2a50:	51 cf       	rjmp	.-350    	; 0x28f4 <Keypad_GetKey+0x1c>
		}
    
		GPIO_WRITE_PIN_VALUE(KEYPAD_PORT ,ROWCOUNT , HIGH);  //deactivate again
	}

   return RESULT;
    2a52:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    2a54:	61 96       	adiw	r28, 0x11	; 17
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <print_enter_new_password>:
/* 	 Function    : print_enter_new_password
**   Parameters  : None
**   Return      : None
**   Description : It will clear LCD and print " Enter New Pass "
*/
void print_enter_new_password(void){
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear();
    2a6e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_WriteSentence(" Enter New Pass ");
    2a72:	80 e6       	ldi	r24, 0x60	; 96
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	LCD_2nd_Line();
    2a7a:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <get_password>:
/* 	 Function    : get_password
**   Parameters  : None
**   Return      : password
**   Description : It will get key from user , print '*' on LCD
*/
void get_password(UINT16* passcode){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <get_password+0x6>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <get_password+0x8>
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
	UINT8 digit;
	UINT8 key;

	key =Keypad_GetKey();
    2a94:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <Keypad_GetKey>
    2a98:	89 83       	std	Y+1, r24	; 0x01
	if(key != NO_KEY_IS_PRESSED){
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	8a 3f       	cpi	r24, 0xFA	; 250
    2a9e:	51 f1       	breq	.+84     	; 0x2af4 <get_password+0x70>
	/******* converting from ASCII to integer (Decimal) *******/
		digit = key - '0'; //'0' = 48 in ASCII
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	80 53       	subi	r24, 0x30	; 48
    2aa4:	8a 83       	std	Y+2, r24	; 0x02
		*passcode *= 10 ;
    2aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	9c 01       	movw	r18, r24
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	82 0f       	add	r24, r18
    2ac0:	93 1f       	adc	r25, r19
    2ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
		*passcode += digit;
    2aca:	eb 81       	ldd	r30, Y+3	; 0x03
    2acc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ace:	20 81       	ld	r18, Z
    2ad0:	31 81       	ldd	r19, Z+1	; 0x01
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	82 0f       	add	r24, r18
    2ada:	93 1f       	adc	r25, r19
    2adc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ade:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
		LCD_WriteData('*');
    2ae4:	8a e2       	ldi	r24, 0x2A	; 42
    2ae6:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_WriteData>
		keys_counter++;
    2aea:	80 91 31 02 	lds	r24, 0x0231
    2aee:	8f 5f       	subi	r24, 0xFF	; 255
    2af0:	80 93 31 02 	sts	0x0231, r24

	}


}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <get_key_counts>:
/* 	 Function    : get_key_counts
**   Parameters  : None
**   Return      : number of keys entered by the user
**   Description : It will get number of keys entered by the user
*/
UINT8 get_key_counts(){
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
	return keys_counter;
    2b0a:	80 91 31 02 	lds	r24, 0x0231
}
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <set_key_counts>:
/* 	 Function    : set_key_counts
**   Parameters  : number of counts
**   Return      : None
**   Description : It will set number of keys entered by the user
*/
void set_key_counts(UINT8 num){
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	89 83       	std	Y+1, r24	; 0x01
	 keys_counter = num;
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	80 93 31 02 	sts	0x0231, r24
}
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <print_enter_confirm_password>:
**   Parameters  : None
**   Return      : None
**   Description : It will clear LCD and print Enter Confirmation Pass
*/
void print_enter_confirm_password(void)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    2b36:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_WriteSentence(" Confirm Pass ");
    2b3a:	81 e7       	ldi	r24, 0x71	; 113
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	LCD_2nd_Line();
    2b42:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <print_enter_master_password>:
/* 	 Function    : print_enter_master_password
**   Parameters  : None
**   Return      : None
**   Description : It will clear LCD and print " Enter master Password "
*/
void print_enter_master_password(void){
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear();
    2b54:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_WriteSentence("Master password");
    2b58:	80 e8       	ldi	r24, 0x80	; 128
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	LCD_2nd_Line();
    2b60:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <print_enter_old_password>:
/* 	 Function    : print_enter_old_password
**   Parameters  : None
**   Return      : None
**   Description : it clears the LCD then prints enter old password on LCD
*/
void print_enter_old_password(void){
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear();
    2b72:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_1st_Line();
    2b76:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
	LCD_WriteSentence(" Enter Old Pass ");
    2b7a:	80 e9       	ldi	r24, 0x90	; 144
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	LCD_2nd_Line();
    2b82:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <print_enter_password>:
/* 	 Function    : print_enter_password
**   Parameters  : None
**   Return      : None
**   Description : it clears the LCD then prints " Enter Password " on LCD
*/
void print_enter_password(void){
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear();
    2b94:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_1st_Line();
    2b98:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
	LCD_WriteSentence(" Enter Password ");
    2b9c:	81 ea       	ldi	r24, 0xA1	; 161
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	LCD_2nd_Line();
    2ba4:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <open_safe>:
/* 	 Function    : open_safe
**   Parameters  : None
**   Return      : None
**   Description : It will open the safe
*/
void open_safe(void){
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    2bb6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_WriteSentence("  Safe  Opened  ");
    2bba:	82 eb       	ldi	r24, 0xB2	; 178
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	Stepper_SetDirection(CLOCKWISE);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <Stepper_SetDirection>
	Stepper_Half_Revoloution();
    2bc8:	0e 94 90 0a 	call	0x1520	; 0x1520 <Stepper_Half_Revoloution>
}
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <close_safe>:
/* 	 Function    : close_safe
**   Parameters  : None
**   Return      : None
**   Description : It will close the safe
*/
void close_safe(void){
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    2bda:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	LCD_WriteSentence("  Safe  Closed  ");
    2bde:	83 ec       	ldi	r24, 0xC3	; 195
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	Stepper_SetDirection(COUNTER_CLOCKWISE);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <Stepper_SetDirection>
	Stepper_Half_Revoloution();
    2bec:	0e 94 90 0a 	call	0x1520	; 0x1520 <Stepper_Half_Revoloution>
}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <wait_in_second>:
/* 	 Function    : wait_in_second
**   Parameters  : time
**   Return      : None
**   Description : It will wait for user enter seconds
*/
void wait_in_second(UINT8 time){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	2f 97       	sbiw	r28, 0x0f	; 15
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000*time);
    2c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	88 ee       	ldi	r24, 0xE8	; 232
    2c14:	93 e0       	ldi	r25, 0x03	; 3
    2c16:	ac 01       	movw	r20, r24
    2c18:	24 9f       	mul	r18, r20
    2c1a:	c0 01       	movw	r24, r0
    2c1c:	25 9f       	mul	r18, r21
    2c1e:	90 0d       	add	r25, r0
    2c20:	34 9f       	mul	r19, r20
    2c22:	90 0d       	add	r25, r0
    2c24:	11 24       	eor	r1, r1
    2c26:	aa 27       	eor	r26, r26
    2c28:	97 fd       	sbrc	r25, 7
    2c2a:	a0 95       	com	r26
    2c2c:	ba 2f       	mov	r27, r26
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8b 87       	std	Y+11, r24	; 0x0b
    2c3c:	9c 87       	std	Y+12, r25	; 0x0c
    2c3e:	ad 87       	std	Y+13, r26	; 0x0d
    2c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a ef       	ldi	r20, 0xFA	; 250
    2c50:	54 e4       	ldi	r21, 0x44	; 68
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	8f 83       	std	Y+7, r24	; 0x07
    2c5c:	98 87       	std	Y+8, r25	; 0x08
    2c5e:	a9 87       	std	Y+9, r26	; 0x09
    2c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <wait_in_second+0x8e>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <wait_in_second+0x10c>
	else if (__tmp > 65535)
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <wait_in_second+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8d 83       	std	Y+5, r24	; 0x05
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <wait_in_second+0xee>
    2cc6:	88 ec       	ldi	r24, 0xC8	; 200
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <wait_in_second+0xdc>
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <wait_in_second+0xd0>
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <wait_in_second+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf0:	78 85       	ldd	r23, Y+8	; 0x08
    2cf2:	89 85       	ldd	r24, Y+9	; 0x09
    2cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <wait_in_second+0x118>
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
}
    2d16:	2f 96       	adiw	r28, 0x0f	; 15
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <System_Init>:
/* 	 Function    : System_Init
**   Parameters  : None
**   Return      : None
**   Description : It will Initialize the system (LCD - Stepper - Keypad)
*/
void System_Init(void){
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62

	LCD_Init();
    2d30:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_Init>
	Keypad_Init();
    2d34:	0e 94 15 14 	call	0x282a	; 0x282a <Keypad_Init>
	Stepper_Init();
    2d38:	0e 94 3d 0a 	call	0x147a	; 0x147a <Stepper_Init>
	/******* Stepper will make half Revolution in 1 second *******/
	Stepper_Set_Time_Per_Revolution(2000); //takes time in milliSeconds
    2d3c:	80 ed       	ldi	r24, 0xD0	; 208
    2d3e:	97 e0       	ldi	r25, 0x07	; 7
    2d40:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Stepper_Set_Time_Per_Revolution>
}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <remove_password_from_LCD>:
/* 	 Function    : remove_password_from_LCD
**   Parameters  : None
**   Return      : None
**   Description : It will remove the '*' on the LCD , put ' ' instead
*/
void remove_password_from_LCD(void){
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	0f 92       	push	r0
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
	UINT8 i ;
	LCD_2nd_Line();
    2d54:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>

	for(i =0 ; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2d58:	19 82       	std	Y+1, r1	; 0x01
    2d5a:	06 c0       	rjmp	.+12     	; 0x2d68 <remove_password_from_LCD+0x1e>
		LCD_WriteData(' ');
    2d5c:	80 e2       	ldi	r24, 0x20	; 32
    2d5e:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_WriteData>
*/
void remove_password_from_LCD(void){
	UINT8 i ;
	LCD_2nd_Line();

	for(i =0 ; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	84 30       	cpi	r24, 0x04	; 4
    2d6c:	b8 f3       	brcs	.-18     	; 0x2d5c <remove_password_from_LCD+0x12>
		LCD_WriteData(' ');

	LCD_2nd_Line();
    2d6e:	0e 94 0b 14 	call	0x2816	; 0x2816 <LCD_2nd_Line>
}
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <print_number_of_mistakes>:


void print_number_of_mistakes(UINT8 mistakes){
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	0f 92       	push	r0
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	89 83       	std	Y+1, r24	; 0x01
	if(mistakes==0)
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	88 23       	and	r24, r24
    2d8a:	49 f4       	brne	.+18     	; 0x2d9e <print_number_of_mistakes+0x24>
	{
		LCD_Clear();
    2d8c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	    LCD_1st_Line();
    2d90:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
		LCD_WriteSentence(" First mistake ");
    2d94:	84 ed       	ldi	r24, 0xD4	; 212
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
    2d9c:	14 c0       	rjmp	.+40     	; 0x2dc6 <print_number_of_mistakes+0x4c>
	}
	else if(mistakes==1)
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	49 f4       	brne	.+18     	; 0x2db6 <print_number_of_mistakes+0x3c>
	{
		LCD_Clear();
    2da4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
	    LCD_1st_Line();
    2da8:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
		LCD_WriteSentence(" second mistake ");
    2dac:	84 ee       	ldi	r24, 0xE4	; 228
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
    2db4:	08 c0       	rjmp	.+16     	; 0x2dc6 <print_number_of_mistakes+0x4c>
	}
	else
	{
		LCD_Clear();
    2db6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
		LCD_1st_Line();
    2dba:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
		LCD_WriteSentence(" third mistake ");
    2dbe:	85 ef       	ldi	r24, 0xF5	; 245
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
	}
}
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <print_invalid>:

void print_invalid(UINT8 check_if_error)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	if(check_if_error==0)
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	88 23       	and	r24, r24
    2dde:	41 f4       	brne	.+16     	; 0x2df0 <print_invalid+0x22>
	{
		LCD_Clear();
    2de0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_Clear>
		LCD_1st_Line();
    2de4:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_1st_Line>
		LCD_WriteSentence(" wrong password ");
    2de8:	85 e0       	ldi	r24, 0x05	; 5
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	0e 94 ce 13 	call	0x279c	; 0x279c <LCD_WriteSentence>
    }
}
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <state_machine>:
/* 	 Function    : state_machine
**   Parameters  : None
**   Return      : None
**   Description : It will make the state machine
*/
void state_machine(void){
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	c2 58       	subi	r28, 0x82	; 130
    2e06:	d0 40       	sbci	r29, 0x00	; 0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61

	UINT8 change_password_button = 'C' - '0';
    2e12:	fe 01       	movw	r30, r28
    2e14:	e0 58       	subi	r30, 0x80	; 128
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	83 e1       	ldi	r24, 0x13	; 19
    2e1a:	80 83       	st	Z, r24


	switch(state){
    2e1c:	80 91 32 02 	lds	r24, 0x0232
    2e20:	28 2f       	mov	r18, r24
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	cf 57       	subi	r28, 0x7F	; 127
    2e26:	df 4f       	sbci	r29, 0xFF	; 255
    2e28:	39 83       	std	Y+1, r19	; 0x01
    2e2a:	28 83       	st	Y, r18
    2e2c:	c1 58       	subi	r28, 0x81	; 129
    2e2e:	d0 40       	sbci	r29, 0x00	; 0
    2e30:	cf 57       	subi	r28, 0x7F	; 127
    2e32:	df 4f       	sbci	r29, 0xFF	; 255
    2e34:	88 81       	ld	r24, Y
    2e36:	99 81       	ldd	r25, Y+1	; 0x01
    2e38:	c1 58       	subi	r28, 0x81	; 129
    2e3a:	d0 40       	sbci	r29, 0x00	; 0
    2e3c:	83 30       	cpi	r24, 0x03	; 3
    2e3e:	91 05       	cpc	r25, r1
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <state_machine+0x4c>
    2e42:	a2 c3       	rjmp	.+1860   	; 0x3588 <state_machine+0x790>
    2e44:	cf 57       	subi	r28, 0x7F	; 127
    2e46:	df 4f       	sbci	r29, 0xFF	; 255
    2e48:	e8 81       	ld	r30, Y
    2e4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4c:	c1 58       	subi	r28, 0x81	; 129
    2e4e:	d0 40       	sbci	r29, 0x00	; 0
    2e50:	e4 30       	cpi	r30, 0x04	; 4
    2e52:	f1 05       	cpc	r31, r1
    2e54:	ec f4       	brge	.+58     	; 0x2e90 <state_machine+0x98>
    2e56:	cf 57       	subi	r28, 0x7F	; 127
    2e58:	df 4f       	sbci	r29, 0xFF	; 255
    2e5a:	28 81       	ld	r18, Y
    2e5c:	39 81       	ldd	r19, Y+1	; 0x01
    2e5e:	c1 58       	subi	r28, 0x81	; 129
    2e60:	d0 40       	sbci	r29, 0x00	; 0
    2e62:	21 30       	cpi	r18, 0x01	; 1
    2e64:	31 05       	cpc	r19, r1
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <state_machine+0x72>
    2e68:	02 c1       	rjmp	.+516    	; 0x306e <state_machine+0x276>
    2e6a:	cf 57       	subi	r28, 0x7F	; 127
    2e6c:	df 4f       	sbci	r29, 0xFF	; 255
    2e6e:	88 81       	ld	r24, Y
    2e70:	99 81       	ldd	r25, Y+1	; 0x01
    2e72:	c1 58       	subi	r28, 0x81	; 129
    2e74:	d0 40       	sbci	r29, 0x00	; 0
    2e76:	82 30       	cpi	r24, 0x02	; 2
    2e78:	91 05       	cpc	r25, r1
    2e7a:	0c f0       	brlt	.+2      	; 0x2e7e <state_machine+0x86>
    2e7c:	e7 c1       	rjmp	.+974    	; 0x324c <state_machine+0x454>
    2e7e:	cf 57       	subi	r28, 0x7F	; 127
    2e80:	df 4f       	sbci	r29, 0xFF	; 255
    2e82:	e8 81       	ld	r30, Y
    2e84:	f9 81       	ldd	r31, Y+1	; 0x01
    2e86:	c1 58       	subi	r28, 0x81	; 129
    2e88:	d0 40       	sbci	r29, 0x00	; 0
    2e8a:	30 97       	sbiw	r30, 0x00	; 0
    2e8c:	01 f1       	breq	.+64     	; 0x2ece <state_machine+0xd6>
    2e8e:	86 c6       	rjmp	.+3340   	; 0x3b9c <state_machine+0xda4>
    2e90:	cf 57       	subi	r28, 0x7F	; 127
    2e92:	df 4f       	sbci	r29, 0xFF	; 255
    2e94:	28 81       	ld	r18, Y
    2e96:	39 81       	ldd	r19, Y+1	; 0x01
    2e98:	c1 58       	subi	r28, 0x81	; 129
    2e9a:	d0 40       	sbci	r29, 0x00	; 0
    2e9c:	25 30       	cpi	r18, 0x05	; 5
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <state_machine+0xac>
    2ea2:	6e c6       	rjmp	.+3292   	; 0x3b80 <state_machine+0xd88>
    2ea4:	cf 57       	subi	r28, 0x7F	; 127
    2ea6:	df 4f       	sbci	r29, 0xFF	; 255
    2ea8:	88 81       	ld	r24, Y
    2eaa:	99 81       	ldd	r25, Y+1	; 0x01
    2eac:	c1 58       	subi	r28, 0x81	; 129
    2eae:	d0 40       	sbci	r29, 0x00	; 0
    2eb0:	85 30       	cpi	r24, 0x05	; 5
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	0c f4       	brge	.+2      	; 0x2eb8 <state_machine+0xc0>
    2eb6:	a8 c4       	rjmp	.+2384   	; 0x3808 <state_machine+0xa10>
    2eb8:	cf 57       	subi	r28, 0x7F	; 127
    2eba:	df 4f       	sbci	r29, 0xFF	; 255
    2ebc:	e8 81       	ld	r30, Y
    2ebe:	f9 81       	ldd	r31, Y+1	; 0x01
    2ec0:	c1 58       	subi	r28, 0x81	; 129
    2ec2:	d0 40       	sbci	r29, 0x00	; 0
    2ec4:	e6 30       	cpi	r30, 0x06	; 6
    2ec6:	f1 05       	cpc	r31, r1
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <state_machine+0xd4>
    2eca:	63 c6       	rjmp	.+3270   	; 0x3b92 <state_machine+0xd9a>
    2ecc:	67 c6       	rjmp	.+3278   	; 0x3b9c <state_machine+0xda4>
		case NEW_PASSWORD:
			if(function_flag == READY){
    2ece:	80 91 1f 02 	lds	r24, 0x021F
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	29 f4       	brne	.+10     	; 0x2ee0 <state_machine+0xe8>
				print_enter_new_password();
    2ed6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <print_enter_new_password>
				function_flag = DONE;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	80 93 1f 02 	sts	0x021F, r24
			}

			get_password(&password);
    2ee0:	83 e3       	ldi	r24, 0x33	; 51
    2ee2:	92 e0       	ldi	r25, 0x02	; 2
    2ee4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <get_password>
			if(get_key_counts() == NUMBER_OF_DIGITS_IN_PASSWORD){
    2ee8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <get_key_counts>
    2eec:	84 30       	cpi	r24, 0x04	; 4
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <state_machine+0xfa>
    2ef0:	55 c6       	rjmp	.+3242   	; 0x3b9c <state_machine+0xda4>
			set_key_counts(RESET); //Clear the counter
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>
			state = CONFIRM_PASSWORD;
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	80 93 32 02 	sts	0x0232, r24
    2efe:	fe 01       	movw	r30, r28
    2f00:	e5 58       	subi	r30, 0x85	; 133
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	aa e7       	ldi	r26, 0x7A	; 122
    2f0a:	b3 e4       	ldi	r27, 0x43	; 67
    2f0c:	80 83       	st	Z, r24
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	a2 83       	std	Z+2, r26	; 0x02
    2f12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f14:	8e 01       	movw	r16, r28
    2f16:	09 58       	subi	r16, 0x89	; 137
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e5 58       	subi	r30, 0x85	; 133
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	f8 01       	movw	r30, r16
    2f3a:	80 83       	st	Z, r24
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	a2 83       	std	Z+2, r26	; 0x02
    2f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f42:	fe 01       	movw	r30, r28
    2f44:	e9 58       	subi	r30, 0x89	; 137
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	60 81       	ld	r22, Z
    2f4a:	71 81       	ldd	r23, Z+1	; 0x01
    2f4c:	82 81       	ldd	r24, Z+2	; 0x02
    2f4e:	93 81       	ldd	r25, Z+3	; 0x03
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	44 f4       	brge	.+16     	; 0x2f70 <state_machine+0x178>
		__ticks = 1;
    2f60:	fe 01       	movw	r30, r28
    2f62:	eb 58       	subi	r30, 0x8B	; 139
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	64 c0       	rjmp	.+200    	; 0x3038 <state_machine+0x240>
	else if (__tmp > 65535)
    2f70:	fe 01       	movw	r30, r28
    2f72:	e9 58       	subi	r30, 0x89	; 137
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	0c f0       	brlt	.+2      	; 0x2f90 <state_machine+0x198>
    2f8e:	43 c0       	rjmp	.+134    	; 0x3016 <state_machine+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f90:	fe 01       	movw	r30, r28
    2f92:	e5 58       	subi	r30, 0x85	; 133
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	8e 01       	movw	r16, r28
    2fb0:	0b 58       	subi	r16, 0x8B	; 139
    2fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	80 83       	st	Z, r24
    2fc6:	1f c0       	rjmp	.+62     	; 0x3006 <state_machine+0x20e>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ed 58       	subi	r30, 0x8D	; 141
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	88 ec       	ldi	r24, 0xC8	; 200
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	80 83       	st	Z, r24
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ed 58       	subi	r30, 0x8D	; 141
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <state_machine+0x1e8>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ed 58       	subi	r30, 0x8D	; 141
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	de 01       	movw	r26, r28
    2ff0:	ab 58       	subi	r26, 0x8B	; 139
    2ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	eb 58       	subi	r30, 0x8B	; 139
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	11 96       	adiw	r26, 0x01	; 1
    3002:	9c 93       	st	X, r25
    3004:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	fe 01       	movw	r30, r28
    3008:	eb 58       	subi	r30, 0x8B	; 139
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	d1 f6       	brne	.-76     	; 0x2fc8 <state_machine+0x1d0>
    3014:	28 c0       	rjmp	.+80     	; 0x3066 <state_machine+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3016:	8e 01       	movw	r16, r28
    3018:	0b 58       	subi	r16, 0x8B	; 139
    301a:	1f 4f       	sbci	r17, 0xFF	; 255
    301c:	fe 01       	movw	r30, r28
    301e:	e9 58       	subi	r30, 0x89	; 137
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	f8 01       	movw	r30, r16
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	de 01       	movw	r26, r28
    303a:	af 58       	subi	r26, 0x8F	; 143
    303c:	bf 4f       	sbci	r27, 0xFF	; 255
    303e:	fe 01       	movw	r30, r28
    3040:	eb 58       	subi	r30, 0x8B	; 139
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	11 96       	adiw	r26, 0x01	; 1
    304a:	9c 93       	st	X, r25
    304c:	8e 93       	st	-X, r24
    304e:	fe 01       	movw	r30, r28
    3050:	ef 58       	subi	r30, 0x8F	; 143
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <state_machine+0x260>
    305c:	fe 01       	movw	r30, r28
    305e:	ef 58       	subi	r30, 0x8F	; 143
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
			_delay_ms(250);
			function_flag = READY;
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	80 93 1f 02 	sts	0x021F, r24
    306c:	97 c5       	rjmp	.+2862   	; 0x3b9c <state_machine+0xda4>
			}
		break;
		case MASTER_MODE:

			if(function_flag == READY){
    306e:	80 91 1f 02 	lds	r24, 0x021F
    3072:	82 30       	cpi	r24, 0x02	; 2
    3074:	29 f4       	brne	.+10     	; 0x3080 <state_machine+0x288>
			print_enter_master_password();
    3076:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <print_enter_master_password>
			function_flag = DONE;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	80 93 1f 02 	sts	0x021F, r24
			}
            get_password(&master_password);
    3080:	85 e3       	ldi	r24, 0x35	; 53
    3082:	92 e0       	ldi	r25, 0x02	; 2
    3084:	0e 94 42 15 	call	0x2a84	; 0x2a84 <get_password>
            if(get_key_counts()== NUMBER_OF_DIGITS_IN_PASSWORD){
    3088:	0e 94 81 15 	call	0x2b02	; 0x2b02 <get_key_counts>
    308c:	84 30       	cpi	r24, 0x04	; 4
    308e:	09 f0       	breq	.+2      	; 0x3092 <state_machine+0x29a>
    3090:	85 c5       	rjmp	.+2826   	; 0x3b9c <state_machine+0xda4>
            	UINT8 check_if_error = 0 ;
    3092:	fe 01       	movw	r30, r28
    3094:	e1 58       	subi	r30, 0x81	; 129
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	10 82       	st	Z, r1
            	set_key_counts(RESET);
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>


                if( master_password == MASTER_PASSWORD ){
    30a0:	80 91 35 02 	lds	r24, 0x0235
    30a4:	90 91 36 02 	lds	r25, 0x0236
    30a8:	f5 e1       	ldi	r31, 0x15	; 21
    30aa:	83 3b       	cpi	r24, 0xB3	; 179
    30ac:	9f 07       	cpc	r25, r31
    30ae:	71 f4       	brne	.+28     	; 0x30cc <state_machine+0x2d4>
                	function_flag = READY;
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	80 93 1f 02 	sts	0x021F, r24
                	state = NEW_PASSWORD;
    30b6:	10 92 32 02 	sts	0x0232, r1
                	password = RESET;
    30ba:	10 92 34 02 	sts	0x0234, r1
    30be:	10 92 33 02 	sts	0x0233, r1
                	check_if_error = 1 ;
    30c2:	fe 01       	movw	r30, r28
    30c4:	e1 58       	subi	r30, 0x81	; 129
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 83       	st	Z, r24
                }
                master_password = RESET;
    30cc:	10 92 36 02 	sts	0x0236, r1
    30d0:	10 92 35 02 	sts	0x0235, r1
                print_invalid(check_if_error);
    30d4:	fe 01       	movw	r30, r28
    30d6:	e1 58       	subi	r30, 0x81	; 129
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <print_invalid>
    30e0:	fe 01       	movw	r30, r28
    30e2:	e3 59       	subi	r30, 0x93	; 147
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	aa e7       	ldi	r26, 0x7A	; 122
    30ec:	b3 e4       	ldi	r27, 0x43	; 67
    30ee:	80 83       	st	Z, r24
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	a2 83       	std	Z+2, r26	; 0x02
    30f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f6:	8e 01       	movw	r16, r28
    30f8:	07 59       	subi	r16, 0x97	; 151
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	fe 01       	movw	r30, r28
    30fe:	e3 59       	subi	r30, 0x93	; 147
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a ef       	ldi	r20, 0xFA	; 250
    3110:	54 e4       	ldi	r21, 0x44	; 68
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	f8 01       	movw	r30, r16
    311c:	80 83       	st	Z, r24
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	a2 83       	std	Z+2, r26	; 0x02
    3122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3124:	fe 01       	movw	r30, r28
    3126:	e7 59       	subi	r30, 0x97	; 151
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	44 f4       	brge	.+16     	; 0x3152 <state_machine+0x35a>
		__ticks = 1;
    3142:	fe 01       	movw	r30, r28
    3144:	e9 59       	subi	r30, 0x99	; 153
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
    3150:	64 c0       	rjmp	.+200    	; 0x321a <state_machine+0x422>
	else if (__tmp > 65535)
    3152:	fe 01       	movw	r30, r28
    3154:	e7 59       	subi	r30, 0x97	; 151
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	0c f0       	brlt	.+2      	; 0x3172 <state_machine+0x37a>
    3170:	43 c0       	rjmp	.+134    	; 0x31f8 <state_machine+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3172:	fe 01       	movw	r30, r28
    3174:	e3 59       	subi	r30, 0x93	; 147
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e2       	ldi	r20, 0x20	; 32
    3186:	51 e4       	ldi	r21, 0x41	; 65
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8e 01       	movw	r16, r28
    3192:	09 59       	subi	r16, 0x99	; 153
    3194:	1f 4f       	sbci	r17, 0xFF	; 255
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	f8 01       	movw	r30, r16
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	1f c0       	rjmp	.+62     	; 0x31e8 <state_machine+0x3f0>
    31aa:	fe 01       	movw	r30, r28
    31ac:	eb 59       	subi	r30, 0x9B	; 155
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	88 ec       	ldi	r24, 0xC8	; 200
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24
    31b8:	fe 01       	movw	r30, r28
    31ba:	eb 59       	subi	r30, 0x9B	; 155
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <state_machine+0x3ca>
    31c6:	fe 01       	movw	r30, r28
    31c8:	eb 59       	subi	r30, 0x9B	; 155
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	de 01       	movw	r26, r28
    31d2:	a9 59       	subi	r26, 0x99	; 153
    31d4:	bf 4f       	sbci	r27, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	e9 59       	subi	r30, 0x99	; 153
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	11 96       	adiw	r26, 0x01	; 1
    31e4:	9c 93       	st	X, r25
    31e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	fe 01       	movw	r30, r28
    31ea:	e9 59       	subi	r30, 0x99	; 153
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	91 81       	ldd	r25, Z+1	; 0x01
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	d1 f6       	brne	.-76     	; 0x31aa <state_machine+0x3b2>
    31f6:	27 c0       	rjmp	.+78     	; 0x3246 <state_machine+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	8e 01       	movw	r16, r28
    31fa:	09 59       	subi	r16, 0x99	; 153
    31fc:	1f 4f       	sbci	r17, 0xFF	; 255
    31fe:	fe 01       	movw	r30, r28
    3200:	e7 59       	subi	r30, 0x97	; 151
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	60 81       	ld	r22, Z
    3206:	71 81       	ldd	r23, Z+1	; 0x01
    3208:	82 81       	ldd	r24, Z+2	; 0x02
    320a:	93 81       	ldd	r25, Z+3	; 0x03
    320c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	f8 01       	movw	r30, r16
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	80 83       	st	Z, r24
    321a:	de 01       	movw	r26, r28
    321c:	ad 59       	subi	r26, 0x9D	; 157
    321e:	bf 4f       	sbci	r27, 0xFF	; 255
    3220:	fe 01       	movw	r30, r28
    3222:	e9 59       	subi	r30, 0x99	; 153
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
    322a:	8d 93       	st	X+, r24
    322c:	9c 93       	st	X, r25
    322e:	fe 01       	movw	r30, r28
    3230:	ed 59       	subi	r30, 0x9D	; 157
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <state_machine+0x440>
    323c:	fe 01       	movw	r30, r28
    323e:	ed 59       	subi	r30, 0x9D	; 157
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
                _delay_ms(250);
                print_enter_master_password();
    3246:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <print_enter_master_password>
    324a:	a8 c4       	rjmp	.+2384   	; 0x3b9c <state_machine+0xda4>
                    //     remove_password_from_LCD();
              }

		break;
		case CONFIRM_PASSWORD:
			if(function_flag == READY){
    324c:	80 91 1f 02 	lds	r24, 0x021F
    3250:	82 30       	cpi	r24, 0x02	; 2
    3252:	29 f4       	brne	.+10     	; 0x325e <state_machine+0x466>
			print_enter_confirm_password();   //Display Confirmation Text
    3254:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <print_enter_confirm_password>
			function_flag = DONE;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	80 93 1f 02 	sts	0x021F, r24
			}

			get_password(&confirmed_pass); //Function To Get Confirm Password
    325e:	87 e3       	ldi	r24, 0x37	; 55
    3260:	92 e0       	ldi	r25, 0x02	; 2
    3262:	0e 94 42 15 	call	0x2a84	; 0x2a84 <get_password>
			if(get_key_counts()== NUMBER_OF_DIGITS_IN_PASSWORD){
    3266:	0e 94 81 15 	call	0x2b02	; 0x2b02 <get_key_counts>
    326a:	84 30       	cpi	r24, 0x04	; 4
    326c:	09 f0       	breq	.+2      	; 0x3270 <state_machine+0x478>
    326e:	96 c4       	rjmp	.+2348   	; 0x3b9c <state_machine+0xda4>
			set_key_counts(RESET);
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>
			if(confirmed_pass != password) //Comparing With Default Password
    3276:	20 91 37 02 	lds	r18, 0x0237
    327a:	30 91 38 02 	lds	r19, 0x0238
    327e:	80 91 33 02 	lds	r24, 0x0233
    3282:	90 91 34 02 	lds	r25, 0x0234
    3286:	28 17       	cp	r18, r24
    3288:	39 07       	cpc	r19, r25
    328a:	09 f4       	brne	.+2      	; 0x328e <state_machine+0x496>
    328c:	be c0       	rjmp	.+380    	; 0x340a <state_machine+0x612>
			{
				state = NEW_PASSWORD;
    328e:	10 92 32 02 	sts	0x0232, r1
				password = RESET;
    3292:	10 92 34 02 	sts	0x0234, r1
    3296:	10 92 33 02 	sts	0x0233, r1
    329a:	fe 01       	movw	r30, r28
    329c:	e1 5a       	subi	r30, 0xA1	; 161
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	aa e7       	ldi	r26, 0x7A	; 122
    32a6:	b3 e4       	ldi	r27, 0x43	; 67
    32a8:	80 83       	st	Z, r24
    32aa:	91 83       	std	Z+1, r25	; 0x01
    32ac:	a2 83       	std	Z+2, r26	; 0x02
    32ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	8e 01       	movw	r16, r28
    32b2:	05 5a       	subi	r16, 0xA5	; 165
    32b4:	1f 4f       	sbci	r17, 0xFF	; 255
    32b6:	fe 01       	movw	r30, r28
    32b8:	e1 5a       	subi	r30, 0xA1	; 161
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a ef       	ldi	r20, 0xFA	; 250
    32ca:	54 e4       	ldi	r21, 0x44	; 68
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	f8 01       	movw	r30, r16
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	a2 83       	std	Z+2, r26	; 0x02
    32dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32de:	fe 01       	movw	r30, r28
    32e0:	e5 5a       	subi	r30, 0xA5	; 165
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	44 f4       	brge	.+16     	; 0x330c <state_machine+0x514>
		__ticks = 1;
    32fc:	fe 01       	movw	r30, r28
    32fe:	e7 5a       	subi	r30, 0xA7	; 167
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
    330a:	64 c0       	rjmp	.+200    	; 0x33d4 <state_machine+0x5dc>
	else if (__tmp > 65535)
    330c:	fe 01       	movw	r30, r28
    330e:	e5 5a       	subi	r30, 0xA5	; 165
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	3f ef       	ldi	r19, 0xFF	; 255
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	57 e4       	ldi	r21, 0x47	; 71
    3322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	0c f0       	brlt	.+2      	; 0x332c <state_machine+0x534>
    332a:	43 c0       	rjmp	.+134    	; 0x33b2 <state_machine+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332c:	fe 01       	movw	r30, r28
    332e:	e1 5a       	subi	r30, 0xA1	; 161
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e2       	ldi	r20, 0x20	; 32
    3340:	51 e4       	ldi	r21, 0x41	; 65
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	8e 01       	movw	r16, r28
    334c:	07 5a       	subi	r16, 0xA7	; 167
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	f8 01       	movw	r30, r16
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	1f c0       	rjmp	.+62     	; 0x33a2 <state_machine+0x5aa>
    3364:	fe 01       	movw	r30, r28
    3366:	e9 5a       	subi	r30, 0xA9	; 169
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
    3372:	fe 01       	movw	r30, r28
    3374:	e9 5a       	subi	r30, 0xA9	; 169
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <state_machine+0x584>
    3380:	fe 01       	movw	r30, r28
    3382:	e9 5a       	subi	r30, 0xA9	; 169
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338a:	de 01       	movw	r26, r28
    338c:	a7 5a       	subi	r26, 0xA7	; 167
    338e:	bf 4f       	sbci	r27, 0xFF	; 255
    3390:	fe 01       	movw	r30, r28
    3392:	e7 5a       	subi	r30, 0xA7	; 167
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	91 81       	ldd	r25, Z+1	; 0x01
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	9c 93       	st	X, r25
    33a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e7 5a       	subi	r30, 0xA7	; 167
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	d1 f6       	brne	.-76     	; 0x3364 <state_machine+0x56c>
    33b0:	28 c0       	rjmp	.+80     	; 0x3402 <state_machine+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	8e 01       	movw	r16, r28
    33b4:	07 5a       	subi	r16, 0xA7	; 167
    33b6:	1f 4f       	sbci	r17, 0xFF	; 255
    33b8:	fe 01       	movw	r30, r28
    33ba:	e5 5a       	subi	r30, 0xA5	; 165
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	f8 01       	movw	r30, r16
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	de 01       	movw	r26, r28
    33d6:	ab 5a       	subi	r26, 0xAB	; 171
    33d8:	bf 4f       	sbci	r27, 0xFF	; 255
    33da:	fe 01       	movw	r30, r28
    33dc:	e7 5a       	subi	r30, 0xA7	; 167
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	11 96       	adiw	r26, 0x01	; 1
    33e6:	9c 93       	st	X, r25
    33e8:	8e 93       	st	-X, r24
    33ea:	fe 01       	movw	r30, r28
    33ec:	eb 5a       	subi	r30, 0xAB	; 171
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <state_machine+0x5fc>
    33f8:	fe 01       	movw	r30, r28
    33fa:	eb 5a       	subi	r30, 0xAB	; 171
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
				_delay_ms(250);
				function_flag = READY;
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	80 93 1f 02 	sts	0x021F, r24
    3408:	ba c0       	rjmp	.+372    	; 0x357e <state_machine+0x786>
			}
			else{
				state = OPEN_SAFE;
    340a:	85 e0       	ldi	r24, 0x05	; 5
    340c:	80 93 32 02 	sts	0x0232, r24
    3410:	fe 01       	movw	r30, r28
    3412:	ef 5a       	subi	r30, 0xAF	; 175
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	aa e7       	ldi	r26, 0x7A	; 122
    341c:	b3 e4       	ldi	r27, 0x43	; 67
    341e:	80 83       	st	Z, r24
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	a2 83       	std	Z+2, r26	; 0x02
    3424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	8e 01       	movw	r16, r28
    3428:	03 5b       	subi	r16, 0xB3	; 179
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	ef 5a       	subi	r30, 0xAF	; 175
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	4a ef       	ldi	r20, 0xFA	; 250
    3440:	54 e4       	ldi	r21, 0x44	; 68
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	80 83       	st	Z, r24
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	a2 83       	std	Z+2, r26	; 0x02
    3452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3454:	fe 01       	movw	r30, r28
    3456:	e3 5b       	subi	r30, 0xB3	; 179
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	44 f4       	brge	.+16     	; 0x3482 <state_machine+0x68a>
		__ticks = 1;
    3472:	fe 01       	movw	r30, r28
    3474:	e5 5b       	subi	r30, 0xB5	; 181
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	64 c0       	rjmp	.+200    	; 0x354a <state_machine+0x752>
	else if (__tmp > 65535)
    3482:	fe 01       	movw	r30, r28
    3484:	e3 5b       	subi	r30, 0xB3	; 179
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	57 e4       	ldi	r21, 0x47	; 71
    3498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    349c:	18 16       	cp	r1, r24
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <state_machine+0x6aa>
    34a0:	43 c0       	rjmp	.+134    	; 0x3528 <state_machine+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	fe 01       	movw	r30, r28
    34a4:	ef 5a       	subi	r30, 0xAF	; 175
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8e 01       	movw	r16, r28
    34c2:	05 5b       	subi	r16, 0xB5	; 181
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	1f c0       	rjmp	.+62     	; 0x3518 <state_machine+0x720>
    34da:	fe 01       	movw	r30, r28
    34dc:	e7 5b       	subi	r30, 0xB7	; 183
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	fe 01       	movw	r30, r28
    34ea:	e7 5b       	subi	r30, 0xB7	; 183
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <state_machine+0x6fa>
    34f6:	fe 01       	movw	r30, r28
    34f8:	e7 5b       	subi	r30, 0xB7	; 183
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	de 01       	movw	r26, r28
    3502:	a5 5b       	subi	r26, 0xB5	; 181
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	e5 5b       	subi	r30, 0xB5	; 181
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 93       	st	X, r25
    3516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3518:	fe 01       	movw	r30, r28
    351a:	e5 5b       	subi	r30, 0xB5	; 181
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	d1 f6       	brne	.-76     	; 0x34da <state_machine+0x6e2>
    3526:	28 c0       	rjmp	.+80     	; 0x3578 <state_machine+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	8e 01       	movw	r16, r28
    352a:	05 5b       	subi	r16, 0xB5	; 181
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	fe 01       	movw	r30, r28
    3530:	e3 5b       	subi	r30, 0xB3	; 179
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	de 01       	movw	r26, r28
    354c:	a9 5b       	subi	r26, 0xB9	; 185
    354e:	bf 4f       	sbci	r27, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e5 5b       	subi	r30, 0xB5	; 181
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	11 96       	adiw	r26, 0x01	; 1
    355c:	9c 93       	st	X, r25
    355e:	8e 93       	st	-X, r24
    3560:	fe 01       	movw	r30, r28
    3562:	e9 5b       	subi	r30, 0xB9	; 185
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <state_machine+0x772>
    356e:	fe 01       	movw	r30, r28
    3570:	e9 5b       	subi	r30, 0xB9	; 185
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	80 83       	st	Z, r24
				_delay_ms(250);
				function_flag = READY;
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	80 93 1f 02 	sts	0x021F, r24
				}
			confirmed_pass = RESET;
    357e:	10 92 38 02 	sts	0x0238, r1
    3582:	10 92 37 02 	sts	0x0237, r1
    3586:	0a c3       	rjmp	.+1556   	; 0x3b9c <state_machine+0xda4>
			}
		break;
			case OLD_PASSWORD:
			if(function_flag == READY){
    3588:	80 91 1f 02 	lds	r24, 0x021F
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	29 f4       	brne	.+10     	; 0x359a <state_machine+0x7a2>
			print_enter_old_password();
    3590:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <print_enter_old_password>
			function_flag = DONE;
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	80 93 1f 02 	sts	0x021F, r24
			}
			/* checks if the password user ENTERED "correct" or "wrong"
			 * - correct ---->>>>   goes to "NEW_PASSWORD" state machine
			 * - false   ---->>>>  increment the counter by 1 and return to "OLD_PSSWORD" state machine
			 */
			get_password(&old_password);
    359a:	89 e3       	ldi	r24, 0x39	; 57
    359c:	92 e0       	ldi	r25, 0x02	; 2
    359e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <get_password>

			if(get_key_counts()== NUMBER_OF_DIGITS_IN_PASSWORD){
    35a2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <get_key_counts>
    35a6:	84 30       	cpi	r24, 0x04	; 4
    35a8:	09 f0       	breq	.+2      	; 0x35ac <state_machine+0x7b4>
    35aa:	f8 c2       	rjmp	.+1520   	; 0x3b9c <state_machine+0xda4>
			   set_key_counts(RESET);
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>
				if (old_password == password)
    35b2:	20 91 39 02 	lds	r18, 0x0239
    35b6:	30 91 3a 02 	lds	r19, 0x023A
    35ba:	80 91 33 02 	lds	r24, 0x0233
    35be:	90 91 34 02 	lds	r25, 0x0234
    35c2:	28 17       	cp	r18, r24
    35c4:	39 07       	cpc	r19, r25
    35c6:	09 f0       	breq	.+2      	; 0x35ca <state_machine+0x7d2>
    35c8:	91 c0       	rjmp	.+290    	; 0x36ec <state_machine+0x8f4>
				{
					state = NEW_PASSWORD;
    35ca:	10 92 32 02 	sts	0x0232, r1
					password = RESET;
    35ce:	10 92 34 02 	sts	0x0234, r1
    35d2:	10 92 33 02 	sts	0x0233, r1
    35d6:	fe 01       	movw	r30, r28
    35d8:	ed 5b       	subi	r30, 0xBD	; 189
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	aa e7       	ldi	r26, 0x7A	; 122
    35e2:	b3 e4       	ldi	r27, 0x43	; 67
    35e4:	80 83       	st	Z, r24
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	a2 83       	std	Z+2, r26	; 0x02
    35ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	8e 01       	movw	r16, r28
    35ee:	01 5c       	subi	r16, 0xC1	; 193
    35f0:	1f 4f       	sbci	r17, 0xFF	; 255
    35f2:	fe 01       	movw	r30, r28
    35f4:	ed 5b       	subi	r30, 0xBD	; 189
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	60 81       	ld	r22, Z
    35fa:	71 81       	ldd	r23, Z+1	; 0x01
    35fc:	82 81       	ldd	r24, Z+2	; 0x02
    35fe:	93 81       	ldd	r25, Z+3	; 0x03
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	4a ef       	ldi	r20, 0xFA	; 250
    3606:	54 e4       	ldi	r21, 0x44	; 68
    3608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	f8 01       	movw	r30, r16
    3612:	80 83       	st	Z, r24
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	a2 83       	std	Z+2, r26	; 0x02
    3618:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361a:	fe 01       	movw	r30, r28
    361c:	ff 96       	adiw	r30, 0x3f	; 63
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e8       	ldi	r20, 0x80	; 128
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3632:	88 23       	and	r24, r24
    3634:	2c f4       	brge	.+10     	; 0x3640 <state_machine+0x848>
		__ticks = 1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	9e af       	std	Y+62, r25	; 0x3e
    363c:	8d af       	std	Y+61, r24	; 0x3d
    363e:	46 c0       	rjmp	.+140    	; 0x36cc <state_machine+0x8d4>
	else if (__tmp > 65535)
    3640:	fe 01       	movw	r30, r28
    3642:	ff 96       	adiw	r30, 0x3f	; 63
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	3f ef       	ldi	r19, 0xFF	; 255
    3650:	4f e7       	ldi	r20, 0x7F	; 127
    3652:	57 e4       	ldi	r21, 0x47	; 71
    3654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3658:	18 16       	cp	r1, r24
    365a:	64 f5       	brge	.+88     	; 0x36b4 <state_machine+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365c:	fe 01       	movw	r30, r28
    365e:	ed 5b       	subi	r30, 0xBD	; 189
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e2       	ldi	r20, 0x20	; 32
    3670:	51 e4       	ldi	r21, 0x41	; 65
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9e af       	std	Y+62, r25	; 0x3e
    3688:	8d af       	std	Y+61, r24	; 0x3d
    368a:	0f c0       	rjmp	.+30     	; 0x36aa <state_machine+0x8b2>
    368c:	88 ec       	ldi	r24, 0xC8	; 200
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9c af       	std	Y+60, r25	; 0x3c
    3692:	8b af       	std	Y+59, r24	; 0x3b
    3694:	8b ad       	ldd	r24, Y+59	; 0x3b
    3696:	9c ad       	ldd	r25, Y+60	; 0x3c
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <state_machine+0x8a0>
    369c:	9c af       	std	Y+60, r25	; 0x3c
    369e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	9e af       	std	Y+62, r25	; 0x3e
    36a8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	69 f7       	brne	.-38     	; 0x368c <state_machine+0x894>
    36b2:	16 c0       	rjmp	.+44     	; 0x36e0 <state_machine+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b4:	fe 01       	movw	r30, r28
    36b6:	ff 96       	adiw	r30, 0x3f	; 63
    36b8:	60 81       	ld	r22, Z
    36ba:	71 81       	ldd	r23, Z+1	; 0x01
    36bc:	82 81       	ldd	r24, Z+2	; 0x02
    36be:	93 81       	ldd	r25, Z+3	; 0x03
    36c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	9e af       	std	Y+62, r25	; 0x3e
    36ca:	8d af       	std	Y+61, r24	; 0x3d
    36cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    36d0:	9a af       	std	Y+58, r25	; 0x3a
    36d2:	89 af       	std	Y+57, r24	; 0x39
    36d4:	89 ad       	ldd	r24, Y+57	; 0x39
    36d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <state_machine+0x8e0>
    36dc:	9a af       	std	Y+58, r25	; 0x3a
    36de:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(250);
					counter = RESET;
    36e0:	10 92 3e 02 	sts	0x023E, r1
					function_flag = READY;
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	80 93 1f 02 	sts	0x021F, r24
    36ea:	89 c0       	rjmp	.+274    	; 0x37fe <state_machine+0xa06>
				}
				else
				{
					print_number_of_mistakes(counter);
    36ec:	80 91 3e 02 	lds	r24, 0x023E
    36f0:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <print_number_of_mistakes>
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	aa e7       	ldi	r26, 0x7A	; 122
    36fa:	b3 e4       	ldi	r27, 0x43	; 67
    36fc:	8d ab       	std	Y+53, r24	; 0x35
    36fe:	9e ab       	std	Y+54, r25	; 0x36
    3700:	af ab       	std	Y+55, r26	; 0x37
    3702:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3704:	6d a9       	ldd	r22, Y+53	; 0x35
    3706:	7e a9       	ldd	r23, Y+54	; 0x36
    3708:	8f a9       	ldd	r24, Y+55	; 0x37
    370a:	98 ad       	ldd	r25, Y+56	; 0x38
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	4a ef       	ldi	r20, 0xFA	; 250
    3712:	54 e4       	ldi	r21, 0x44	; 68
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	89 ab       	std	Y+49, r24	; 0x31
    371e:	9a ab       	std	Y+50, r25	; 0x32
    3720:	ab ab       	std	Y+51, r26	; 0x33
    3722:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3724:	69 a9       	ldd	r22, Y+49	; 0x31
    3726:	7a a9       	ldd	r23, Y+50	; 0x32
    3728:	8b a9       	ldd	r24, Y+51	; 0x33
    372a:	9c a9       	ldd	r25, Y+52	; 0x34
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e8       	ldi	r20, 0x80	; 128
    3732:	5f e3       	ldi	r21, 0x3F	; 63
    3734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3738:	88 23       	and	r24, r24
    373a:	2c f4       	brge	.+10     	; 0x3746 <state_machine+0x94e>
		__ticks = 1;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	98 ab       	std	Y+48, r25	; 0x30
    3742:	8f a7       	std	Y+47, r24	; 0x2f
    3744:	3f c0       	rjmp	.+126    	; 0x37c4 <state_machine+0x9cc>
	else if (__tmp > 65535)
    3746:	69 a9       	ldd	r22, Y+49	; 0x31
    3748:	7a a9       	ldd	r23, Y+50	; 0x32
    374a:	8b a9       	ldd	r24, Y+51	; 0x33
    374c:	9c a9       	ldd	r25, Y+52	; 0x34
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	3f ef       	ldi	r19, 0xFF	; 255
    3752:	4f e7       	ldi	r20, 0x7F	; 127
    3754:	57 e4       	ldi	r21, 0x47	; 71
    3756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    375a:	18 16       	cp	r1, r24
    375c:	4c f5       	brge	.+82     	; 0x37b0 <state_machine+0x9b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375e:	6d a9       	ldd	r22, Y+53	; 0x35
    3760:	7e a9       	ldd	r23, Y+54	; 0x36
    3762:	8f a9       	ldd	r24, Y+55	; 0x37
    3764:	98 ad       	ldd	r25, Y+56	; 0x38
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	40 e2       	ldi	r20, 0x20	; 32
    376c:	51 e4       	ldi	r21, 0x41	; 65
    376e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	98 ab       	std	Y+48, r25	; 0x30
    3784:	8f a7       	std	Y+47, r24	; 0x2f
    3786:	0f c0       	rjmp	.+30     	; 0x37a6 <state_machine+0x9ae>
    3788:	88 ec       	ldi	r24, 0xC8	; 200
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	9e a7       	std	Y+46, r25	; 0x2e
    378e:	8d a7       	std	Y+45, r24	; 0x2d
    3790:	8d a5       	ldd	r24, Y+45	; 0x2d
    3792:	9e a5       	ldd	r25, Y+46	; 0x2e
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <state_machine+0x99c>
    3798:	9e a7       	std	Y+46, r25	; 0x2e
    379a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379c:	8f a5       	ldd	r24, Y+47	; 0x2f
    379e:	98 a9       	ldd	r25, Y+48	; 0x30
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	98 ab       	std	Y+48, r25	; 0x30
    37a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a8:	98 a9       	ldd	r25, Y+48	; 0x30
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	69 f7       	brne	.-38     	; 0x3788 <state_machine+0x990>
    37ae:	14 c0       	rjmp	.+40     	; 0x37d8 <state_machine+0x9e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b0:	69 a9       	ldd	r22, Y+49	; 0x31
    37b2:	7a a9       	ldd	r23, Y+50	; 0x32
    37b4:	8b a9       	ldd	r24, Y+51	; 0x33
    37b6:	9c a9       	ldd	r25, Y+52	; 0x34
    37b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	98 ab       	std	Y+48, r25	; 0x30
    37c2:	8f a7       	std	Y+47, r24	; 0x2f
    37c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37c6:	98 a9       	ldd	r25, Y+48	; 0x30
    37c8:	9c a7       	std	Y+44, r25	; 0x2c
    37ca:	8b a7       	std	Y+43, r24	; 0x2b
    37cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    37ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	f1 f7       	brne	.-4      	; 0x37d0 <state_machine+0x9d8>
    37d4:	9c a7       	std	Y+44, r25	; 0x2c
    37d6:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(250);
					print_enter_old_password();
    37d8:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <print_enter_old_password>
				//	remove_password_from_LCD();
					counter++;
    37dc:	80 91 3e 02 	lds	r24, 0x023E
    37e0:	8f 5f       	subi	r24, 0xFF	; 255
    37e2:	80 93 3e 02 	sts	0x023E, r24
					if (counter == NUMBER_OF_TRIALS)
    37e6:	80 91 3e 02 	lds	r24, 0x023E
    37ea:	83 30       	cpi	r24, 0x03	; 3
    37ec:	41 f4       	brne	.+16     	; 0x37fe <state_machine+0xa06>
					{

						counter = RESET ;
    37ee:	10 92 3e 02 	sts	0x023E, r1
						state = MASTER_MODE;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	80 93 32 02 	sts	0x0232, r24
						function_flag = READY;
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	80 93 1f 02 	sts	0x021F, r24
					}

				}

				old_password = RESET;
    37fe:	10 92 3a 02 	sts	0x023A, r1
    3802:	10 92 39 02 	sts	0x0239, r1
    3806:	ca c1       	rjmp	.+916    	; 0x3b9c <state_machine+0xda4>
			}
			break;
		case ENTER_PASSWORD:
			if(function_flag == READY){
    3808:	80 91 1f 02 	lds	r24, 0x021F
    380c:	82 30       	cpi	r24, 0x02	; 2
    380e:	29 f4       	brne	.+10     	; 0x381a <state_machine+0xa22>
			print_enter_password();
    3810:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <print_enter_password>
			function_flag = DONE;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	80 93 1f 02 	sts	0x021F, r24
			 * "correct pass" ------>>>>>>  open safe
			 * "wrong pass" ------>>>>>>  increment mistakes variables until it reaches 3 and then goes to "MASTER_MODE" state machine
			 * "key" ------>>>>>>  goes to "OLD_PASSWORD" state machine
			 */

			get_password(&entered_password);
    381a:	8b e3       	ldi	r24, 0x3B	; 59
    381c:	92 e0       	ldi	r25, 0x02	; 2
    381e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <get_password>

			if (entered_password == change_password_button)
    3822:	fe 01       	movw	r30, r28
    3824:	e0 58       	subi	r30, 0x80	; 128
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 81       	ld	r24, Z
    382a:	28 2f       	mov	r18, r24
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	80 91 3b 02 	lds	r24, 0x023B
    3832:	90 91 3c 02 	lds	r25, 0x023C
    3836:	28 17       	cp	r18, r24
    3838:	39 07       	cpc	r19, r25
    383a:	09 f0       	breq	.+2      	; 0x383e <state_machine+0xa46>
    383c:	84 c0       	rjmp	.+264    	; 0x3946 <state_machine+0xb4e>
			{
				remove_password_from_LCD();
    383e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <remove_password_from_LCD>
				set_key_counts(RESET);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>
				entered_password = RESET;
    3848:	10 92 3c 02 	sts	0x023C, r1
    384c:	10 92 3b 02 	sts	0x023B, r1
				mistakes = RESET; // to reset the number of mistakes
    3850:	10 92 3d 02 	sts	0x023D, r1
				state = OLD_PASSWORD;
    3854:	83 e0       	ldi	r24, 0x03	; 3
    3856:	80 93 32 02 	sts	0x0232, r24
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	aa e7       	ldi	r26, 0x7A	; 122
    3860:	b3 e4       	ldi	r27, 0x43	; 67
    3862:	8f a3       	std	Y+39, r24	; 0x27
    3864:	98 a7       	std	Y+40, r25	; 0x28
    3866:	a9 a7       	std	Y+41, r26	; 0x29
    3868:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	6f a1       	ldd	r22, Y+39	; 0x27
    386c:	78 a5       	ldd	r23, Y+40	; 0x28
    386e:	89 a5       	ldd	r24, Y+41	; 0x29
    3870:	9a a5       	ldd	r25, Y+42	; 0x2a
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8b a3       	std	Y+35, r24	; 0x23
    3884:	9c a3       	std	Y+36, r25	; 0x24
    3886:	ad a3       	std	Y+37, r26	; 0x25
    3888:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    388a:	6b a1       	ldd	r22, Y+35	; 0x23
    388c:	7c a1       	ldd	r23, Y+36	; 0x24
    388e:	8d a1       	ldd	r24, Y+37	; 0x25
    3890:	9e a1       	ldd	r25, Y+38	; 0x26
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <state_machine+0xab4>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9a a3       	std	Y+34, r25	; 0x22
    38a8:	89 a3       	std	Y+33, r24	; 0x21
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <state_machine+0xb32>
	else if (__tmp > 65535)
    38ac:	6b a1       	ldd	r22, Y+35	; 0x23
    38ae:	7c a1       	ldd	r23, Y+36	; 0x24
    38b0:	8d a1       	ldd	r24, Y+37	; 0x25
    38b2:	9e a1       	ldd	r25, Y+38	; 0x26
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <state_machine+0xb1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	6f a1       	ldd	r22, Y+39	; 0x27
    38c6:	78 a5       	ldd	r23, Y+40	; 0x28
    38c8:	89 a5       	ldd	r24, Y+41	; 0x29
    38ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9a a3       	std	Y+34, r25	; 0x22
    38ea:	89 a3       	std	Y+33, r24	; 0x21
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <state_machine+0xb14>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	98 a3       	std	Y+32, r25	; 0x20
    38f4:	8f 8f       	std	Y+31, r24	; 0x1f
    38f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f8:	98 a1       	ldd	r25, Y+32	; 0x20
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <state_machine+0xb02>
    38fe:	98 a3       	std	Y+32, r25	; 0x20
    3900:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	89 a1       	ldd	r24, Y+33	; 0x21
    3904:	9a a1       	ldd	r25, Y+34	; 0x22
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9a a3       	std	Y+34, r25	; 0x22
    390a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	89 a1       	ldd	r24, Y+33	; 0x21
    390e:	9a a1       	ldd	r25, Y+34	; 0x22
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <state_machine+0xaf6>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <state_machine+0xb46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	6b a1       	ldd	r22, Y+35	; 0x23
    3918:	7c a1       	ldd	r23, Y+36	; 0x24
    391a:	8d a1       	ldd	r24, Y+37	; 0x25
    391c:	9e a1       	ldd	r25, Y+38	; 0x26
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9a a3       	std	Y+34, r25	; 0x22
    3928:	89 a3       	std	Y+33, r24	; 0x21
    392a:	89 a1       	ldd	r24, Y+33	; 0x21
    392c:	9a a1       	ldd	r25, Y+34	; 0x22
    392e:	9e 8f       	std	Y+30, r25	; 0x1e
    3930:	8d 8f       	std	Y+29, r24	; 0x1d
    3932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3934:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <state_machine+0xb3e>
    393a:	9e 8f       	std	Y+30, r25	; 0x1e
    393c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(250);
				function_flag = READY;
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	80 93 1f 02 	sts	0x021F, r24
    3944:	2b c1       	rjmp	.+598    	; 0x3b9c <state_machine+0xda4>
			}
			else{
				if(get_key_counts()== NUMBER_OF_DIGITS_IN_PASSWORD){
    3946:	0e 94 81 15 	call	0x2b02	; 0x2b02 <get_key_counts>
    394a:	84 30       	cpi	r24, 0x04	; 4
    394c:	09 f0       	breq	.+2      	; 0x3950 <state_machine+0xb58>
    394e:	26 c1       	rjmp	.+588    	; 0x3b9c <state_machine+0xda4>
				set_key_counts(RESET);
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_key_counts>

					if(entered_password == password)
    3956:	20 91 3b 02 	lds	r18, 0x023B
    395a:	30 91 3c 02 	lds	r19, 0x023C
    395e:	80 91 33 02 	lds	r24, 0x0233
    3962:	90 91 34 02 	lds	r25, 0x0234
    3966:	28 17       	cp	r18, r24
    3968:	39 07       	cpc	r19, r25
    396a:	09 f0       	breq	.+2      	; 0x396e <state_machine+0xb76>
    396c:	7b c0       	rjmp	.+246    	; 0x3a64 <state_machine+0xc6c>
					{
						mistakes = RESET;
    396e:	10 92 3d 02 	sts	0x023D, r1
						state = OPEN_SAFE;
    3972:	85 e0       	ldi	r24, 0x05	; 5
    3974:	80 93 32 02 	sts	0x0232, r24
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	aa e7       	ldi	r26, 0x7A	; 122
    397e:	b3 e4       	ldi	r27, 0x43	; 67
    3980:	89 8f       	std	Y+25, r24	; 0x19
    3982:	9a 8f       	std	Y+26, r25	; 0x1a
    3984:	ab 8f       	std	Y+27, r26	; 0x1b
    3986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3988:	69 8d       	ldd	r22, Y+25	; 0x19
    398a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    398c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4a ef       	ldi	r20, 0xFA	; 250
    3996:	54 e4       	ldi	r21, 0x44	; 68
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8d 8b       	std	Y+21, r24	; 0x15
    39a2:	9e 8b       	std	Y+22, r25	; 0x16
    39a4:	af 8b       	std	Y+23, r26	; 0x17
    39a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39a8:	6d 89       	ldd	r22, Y+21	; 0x15
    39aa:	7e 89       	ldd	r23, Y+22	; 0x16
    39ac:	8f 89       	ldd	r24, Y+23	; 0x17
    39ae:	98 8d       	ldd	r25, Y+24	; 0x18
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	2c f4       	brge	.+10     	; 0x39ca <state_machine+0xbd2>
		__ticks = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 8b       	std	Y+20, r25	; 0x14
    39c6:	8b 8b       	std	Y+19, r24	; 0x13
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <state_machine+0xc50>
	else if (__tmp > 65535)
    39ca:	6d 89       	ldd	r22, Y+21	; 0x15
    39cc:	7e 89       	ldd	r23, Y+22	; 0x16
    39ce:	8f 89       	ldd	r24, Y+23	; 0x17
    39d0:	98 8d       	ldd	r25, Y+24	; 0x18
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	3f ef       	ldi	r19, 0xFF	; 255
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	57 e4       	ldi	r21, 0x47	; 71
    39da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	4c f5       	brge	.+82     	; 0x3a34 <state_machine+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e2:	69 8d       	ldd	r22, Y+25	; 0x19
    39e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9c 8b       	std	Y+20, r25	; 0x14
    3a08:	8b 8b       	std	Y+19, r24	; 0x13
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <state_machine+0xc32>
    3a0c:	88 ec       	ldi	r24, 0xC8	; 200
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9a 8b       	std	Y+18, r25	; 0x12
    3a12:	89 8b       	std	Y+17, r24	; 0x11
    3a14:	89 89       	ldd	r24, Y+17	; 0x11
    3a16:	9a 89       	ldd	r25, Y+18	; 0x12
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <state_machine+0xc20>
    3a1c:	9a 8b       	std	Y+18, r25	; 0x12
    3a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	8b 89       	ldd	r24, Y+19	; 0x13
    3a22:	9c 89       	ldd	r25, Y+20	; 0x14
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	69 f7       	brne	.-38     	; 0x3a0c <state_machine+0xc14>
    3a32:	14 c0       	rjmp	.+40     	; 0x3a5c <state_machine+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	6d 89       	ldd	r22, Y+21	; 0x15
    3a36:	7e 89       	ldd	r23, Y+22	; 0x16
    3a38:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	98 8b       	std	Y+16, r25	; 0x10
    3a4e:	8f 87       	std	Y+15, r24	; 0x0f
    3a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a52:	98 89       	ldd	r25, Y+16	; 0x10
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <state_machine+0xc5c>
    3a58:	98 8b       	std	Y+16, r25	; 0x10
    3a5a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(250);
						function_flag = READY;
    3a5c:	82 e0       	ldi	r24, 0x02	; 2
    3a5e:	80 93 1f 02 	sts	0x021F, r24
    3a62:	89 c0       	rjmp	.+274    	; 0x3b76 <state_machine+0xd7e>
					}
					else
					{
						print_number_of_mistakes(mistakes);
    3a64:	80 91 3d 02 	lds	r24, 0x023D
    3a68:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <print_number_of_mistakes>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	aa e7       	ldi	r26, 0x7A	; 122
    3a72:	b3 e4       	ldi	r27, 0x43	; 67
    3a74:	8b 87       	std	Y+11, r24	; 0x0b
    3a76:	9c 87       	std	Y+12, r25	; 0x0c
    3a78:	ad 87       	std	Y+13, r26	; 0x0d
    3a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	4a ef       	ldi	r20, 0xFA	; 250
    3a8a:	54 e4       	ldi	r21, 0x44	; 68
    3a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	8f 83       	std	Y+7, r24	; 0x07
    3a96:	98 87       	std	Y+8, r25	; 0x08
    3a98:	a9 87       	std	Y+9, r26	; 0x09
    3a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9e:	78 85       	ldd	r23, Y+8	; 0x08
    3aa0:	89 85       	ldd	r24, Y+9	; 0x09
    3aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e8       	ldi	r20, 0x80	; 128
    3aaa:	5f e3       	ldi	r21, 0x3F	; 63
    3aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ab0:	88 23       	and	r24, r24
    3ab2:	2c f4       	brge	.+10     	; 0x3abe <state_machine+0xcc6>
		__ticks = 1;
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	9e 83       	std	Y+6, r25	; 0x06
    3aba:	8d 83       	std	Y+5, r24	; 0x05
    3abc:	3f c0       	rjmp	.+126    	; 0x3b3c <state_machine+0xd44>
	else if (__tmp > 65535)
    3abe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac0:	78 85       	ldd	r23, Y+8	; 0x08
    3ac2:	89 85       	ldd	r24, Y+9	; 0x09
    3ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	3f ef       	ldi	r19, 0xFF	; 255
    3aca:	4f e7       	ldi	r20, 0x7F	; 127
    3acc:	57 e4       	ldi	r21, 0x47	; 71
    3ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ad2:	18 16       	cp	r1, r24
    3ad4:	4c f5       	brge	.+82     	; 0x3b28 <state_machine+0xd30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    3adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e2       	ldi	r20, 0x20	; 32
    3ae4:	51 e4       	ldi	r21, 0x41	; 65
    3ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	bc 01       	movw	r22, r24
    3af0:	cd 01       	movw	r24, r26
    3af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	9e 83       	std	Y+6, r25	; 0x06
    3afc:	8d 83       	std	Y+5, r24	; 0x05
    3afe:	0f c0       	rjmp	.+30     	; 0x3b1e <state_machine+0xd26>
    3b00:	88 ec       	ldi	r24, 0xC8	; 200
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	9c 83       	std	Y+4, r25	; 0x04
    3b06:	8b 83       	std	Y+3, r24	; 0x03
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	f1 f7       	brne	.-4      	; 0x3b0c <state_machine+0xd14>
    3b10:	9c 83       	std	Y+4, r25	; 0x04
    3b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b14:	8d 81       	ldd	r24, Y+5	; 0x05
    3b16:	9e 81       	ldd	r25, Y+6	; 0x06
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	9e 83       	std	Y+6, r25	; 0x06
    3b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b20:	9e 81       	ldd	r25, Y+6	; 0x06
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	69 f7       	brne	.-38     	; 0x3b00 <state_machine+0xd08>
    3b26:	14 c0       	rjmp	.+40     	; 0x3b50 <state_machine+0xd58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b28:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2a:	78 85       	ldd	r23, Y+8	; 0x08
    3b2c:	89 85       	ldd	r24, Y+9	; 0x09
    3b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9e 83       	std	Y+6, r25	; 0x06
    3b3a:	8d 83       	std	Y+5, r24	; 0x05
    3b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	9a 81       	ldd	r25, Y+2	; 0x02
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <state_machine+0xd50>
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(250);
						print_enter_password();
    3b50:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <print_enter_password>
						//remove_password_from_LCD();
						mistakes ++; // increase the number of mistakes
    3b54:	80 91 3d 02 	lds	r24, 0x023D
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	80 93 3d 02 	sts	0x023D, r24
						if (mistakes == NUMBER_OF_TRIALS)
    3b5e:	80 91 3d 02 	lds	r24, 0x023D
    3b62:	83 30       	cpi	r24, 0x03	; 3
    3b64:	41 f4       	brne	.+16     	; 0x3b76 <state_machine+0xd7e>
						{
							mistakes = RESET;
    3b66:	10 92 3d 02 	sts	0x023D, r1
							state = MASTER_MODE;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	80 93 32 02 	sts	0x0232, r24
							function_flag = READY;
    3b70:	82 e0       	ldi	r24, 0x02	; 2
    3b72:	80 93 1f 02 	sts	0x021F, r24
						}

					}
					entered_password = RESET;
    3b76:	10 92 3c 02 	sts	0x023C, r1
    3b7a:	10 92 3b 02 	sts	0x023B, r1
    3b7e:	0e c0       	rjmp	.+28     	; 0x3b9c <state_machine+0xda4>


			break;
		case OPEN_SAFE:

			open_safe();
    3b80:	0e 94 d7 15 	call	0x2bae	; 0x2bae <open_safe>
			wait_in_second(3);
    3b84:	83 e0       	ldi	r24, 0x03	; 3
    3b86:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <wait_in_second>
			state = CLOSE_SAFE;
    3b8a:	86 e0       	ldi	r24, 0x06	; 6
    3b8c:	80 93 32 02 	sts	0x0232, r24
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <state_machine+0xda4>
		break;
		case CLOSE_SAFE:
	        close_safe();
    3b92:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <close_safe>
			state = ENTER_PASSWORD;
    3b96:	84 e0       	ldi	r24, 0x04	; 4
    3b98:	80 93 32 02 	sts	0x0232, r24
		

	}


}
    3b9c:	ce 57       	subi	r28, 0x7E	; 126
    3b9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	08 95       	ret

00003bb4 <main>:
#include "APP/APP.h"
#include "APP/State_Machine.h"


void main(void){
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62

				/*****  initialization of the (LCD - KEYPAD - Stepper)  *****/
	System_Init();
    3bbc:	0e 94 94 16 	call	0x2d28	; 0x2d28 <System_Init>

	while(1){

							/*****  State Machine  *****/
		state_machine();
    3bc0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <state_machine>
    3bc4:	fd cf       	rjmp	.-6      	; 0x3bc0 <main+0xc>

00003bc6 <__udivmodhi4>:
    3bc6:	aa 1b       	sub	r26, r26
    3bc8:	bb 1b       	sub	r27, r27
    3bca:	51 e1       	ldi	r21, 0x11	; 17
    3bcc:	07 c0       	rjmp	.+14     	; 0x3bdc <__udivmodhi4_ep>

00003bce <__udivmodhi4_loop>:
    3bce:	aa 1f       	adc	r26, r26
    3bd0:	bb 1f       	adc	r27, r27
    3bd2:	a6 17       	cp	r26, r22
    3bd4:	b7 07       	cpc	r27, r23
    3bd6:	10 f0       	brcs	.+4      	; 0x3bdc <__udivmodhi4_ep>
    3bd8:	a6 1b       	sub	r26, r22
    3bda:	b7 0b       	sbc	r27, r23

00003bdc <__udivmodhi4_ep>:
    3bdc:	88 1f       	adc	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	5a 95       	dec	r21
    3be2:	a9 f7       	brne	.-22     	; 0x3bce <__udivmodhi4_loop>
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	08 95       	ret

00003bee <__prologue_saves__>:
    3bee:	2f 92       	push	r2
    3bf0:	3f 92       	push	r3
    3bf2:	4f 92       	push	r4
    3bf4:	5f 92       	push	r5
    3bf6:	6f 92       	push	r6
    3bf8:	7f 92       	push	r7
    3bfa:	8f 92       	push	r8
    3bfc:	9f 92       	push	r9
    3bfe:	af 92       	push	r10
    3c00:	bf 92       	push	r11
    3c02:	cf 92       	push	r12
    3c04:	df 92       	push	r13
    3c06:	ef 92       	push	r14
    3c08:	ff 92       	push	r15
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	ca 1b       	sub	r28, r26
    3c18:	db 0b       	sbc	r29, r27
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	09 94       	ijmp

00003c26 <__epilogue_restores__>:
    3c26:	2a 88       	ldd	r2, Y+18	; 0x12
    3c28:	39 88       	ldd	r3, Y+17	; 0x11
    3c2a:	48 88       	ldd	r4, Y+16	; 0x10
    3c2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c30:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c32:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c34:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c36:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c38:	b9 84       	ldd	r11, Y+9	; 0x09
    3c3a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c3c:	df 80       	ldd	r13, Y+7	; 0x07
    3c3e:	ee 80       	ldd	r14, Y+6	; 0x06
    3c40:	fd 80       	ldd	r15, Y+5	; 0x05
    3c42:	0c 81       	ldd	r16, Y+4	; 0x04
    3c44:	1b 81       	ldd	r17, Y+3	; 0x03
    3c46:	aa 81       	ldd	r26, Y+2	; 0x02
    3c48:	b9 81       	ldd	r27, Y+1	; 0x01
    3c4a:	ce 0f       	add	r28, r30
    3c4c:	d1 1d       	adc	r29, r1
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	ed 01       	movw	r28, r26
    3c5a:	08 95       	ret

00003c5c <_exit>:
    3c5c:	f8 94       	cli

00003c5e <__stop_program>:
    3c5e:	ff cf       	rjmp	.-2      	; 0x3c5e <__stop_program>
